<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="3985px" preserveAspectRatio="none" style="width:1801px;height:3985px;background:#FFFFFF;" version="1.1" viewBox="0 0 1801 3985" width="1801px" zoomAndPan="magnify"><defs/><g><!--MD5=[68dcf2e455a7ca0680c153ca8d70d4b0]
cluster SpaIot--><g id="cluster_SpaIot"><path d="M8.5,6 L53.5,6 A3.75,3.75 0 0 1 56,8.5 L63,29.6094 L1791.5,29.6094 A2.5,2.5 0 0 1 1794,32.1094 L1794,3975.5 A2.5,2.5 0 0 1 1791.5,3978 L8.5,3978 A2.5,2.5 0 0 1 6,3975.5 L6,8.5 A2.5,2.5 0 0 1 8.5,6 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="63" y1="29.6094" y2="29.6094"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="10" y="22.5332">SpaIot</text></g><!--MD5=[7e27d3ca6559110cbc0915d401b32d25]
class SpaIot.BusSettings--><g id="elem_SpaIot.BusSettings"><rect codeLine="9" fill="#F1F1F1" height="276.9219" id="SpaIot.BusSettings" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="430" x="368" y="1576"/><ellipse cx="541.25" cy="1592" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M544.0156,1587.875 Q544.1719,1587.6563 544.3594,1587.5469 Q544.5469,1587.4375 544.7656,1587.4375 Q545.1406,1587.4375 545.375,1587.6953 Q545.6094,1587.9531 545.6094,1588.5625 L545.6094,1590.0156 Q545.6094,1590.625 545.375,1590.8906 Q545.1406,1591.1563 544.7656,1591.1563 Q544.4219,1591.1563 544.2188,1590.9531 Q544.0156,1590.7656 543.9063,1590.25 Q543.8594,1589.8906 543.6719,1589.7031 Q543.3438,1589.3281 542.7344,1589.1094 Q542.125,1588.8906 541.5,1588.8906 Q540.7344,1588.8906 540.1016,1589.2188 Q539.4688,1589.5469 538.9766,1590.2969 Q538.4844,1591.0469 538.4844,1592.0781 L538.4844,1593.1719 Q538.4844,1594.4063 539.375,1595.2266 Q540.2656,1596.0469 541.8594,1596.0469 Q542.7969,1596.0469 543.4531,1595.7969 Q543.8438,1595.6406 544.2656,1595.2031 Q544.5313,1594.9375 544.6797,1594.8594 Q544.8281,1594.7813 545.0313,1594.7813 Q545.3594,1594.7813 545.6172,1595.0391 Q545.875,1595.2969 545.875,1595.6406 Q545.875,1595.9844 545.5313,1596.3906 Q545.0313,1596.9688 544.2344,1597.2969 Q543.1563,1597.75 541.8594,1597.75 Q540.3438,1597.75 539.1406,1597.125 Q538.1563,1596.625 537.4688,1595.5547 Q536.7813,1594.4844 536.7813,1593.2031 L536.7813,1592.0469 Q536.7813,1590.7188 537.3984,1589.5703 Q538.0156,1588.4219 539.1094,1587.8047 Q540.2031,1587.1875 541.4375,1587.1875 Q542.1719,1587.1875 542.8203,1587.3516 Q543.4688,1587.5156 544.0156,1587.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="561.75" y="1597.7285">BusSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="369" x2="797" y1="1608" y2="1608"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="376" y="1619.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="388" y="1626.5332">m_pin : std::vector&lt;int&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="369" x2="797" y1="1633.6094" y2="1633.6094"/><ellipse cx="379" cy="1647.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="404" x="388" y="1652.1426">BusSettings(const int dataPin, const int clkPin, const int holdPin)</text><ellipse cx="379" cy="1665.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="299" x="388" y="1669.752">BusSettings(const std::initializer_list&lt;int&gt;&amp; pins)</text><ellipse cx="379" cy="1683.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="388" y="1687.3613">BusSettings()</text><ellipse cx="379" cy="1700.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="388" y="1704.9707">isNull() : bool {query}</text><ellipse cx="379" cy="1718.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="388" y="1722.5801">operator!=(const BusSettings&amp; other) : bool {query}</text><ellipse cx="379" cy="1735.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="388" y="1740.1895">operator==(const BusSettings&amp; other) : bool {query}</text><ellipse cx="379" cy="1753.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="388" y="1757.7988">clkPin() : int {query}</text><ellipse cx="379" cy="1771.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="388" y="1775.4082">dataPin() : int {query}</text><ellipse cx="379" cy="1788.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="388" y="1793.0176">holdPin() : int {query}</text><ellipse cx="379" cy="1806.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="388" y="1810.627">setClkPin(int pin) : void</text><ellipse cx="379" cy="1824.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="388" y="1828.2363">setDataPin(int pin) : void</text><ellipse cx="379" cy="1841.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="388" y="1845.8457">setHoldPin(int pin) : void</text></g><!--MD5=[4e9867af593e3e1629e3b6b82b617456]
class SpaIot.Button--><g id="elem_SpaIot.Button"><rect codeLine="25" fill="#F1F1F1" height="329.75" id="SpaIot.Button" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="320" x="1327" y="2089"/><ellipse cx="1462.25" cy="2105" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1465.0156,2100.875 Q1465.1719,2100.6563 1465.3594,2100.5469 Q1465.5469,2100.4375 1465.7656,2100.4375 Q1466.1406,2100.4375 1466.375,2100.6953 Q1466.6094,2100.9531 1466.6094,2101.5625 L1466.6094,2103.0156 Q1466.6094,2103.625 1466.375,2103.8906 Q1466.1406,2104.1563 1465.7656,2104.1563 Q1465.4219,2104.1563 1465.2188,2103.9531 Q1465.0156,2103.7656 1464.9063,2103.25 Q1464.8594,2102.8906 1464.6719,2102.7031 Q1464.3438,2102.3281 1463.7344,2102.1094 Q1463.125,2101.8906 1462.5,2101.8906 Q1461.7344,2101.8906 1461.1016,2102.2188 Q1460.4688,2102.5469 1459.9766,2103.2969 Q1459.4844,2104.0469 1459.4844,2105.0781 L1459.4844,2106.1719 Q1459.4844,2107.4063 1460.375,2108.2266 Q1461.2656,2109.0469 1462.8594,2109.0469 Q1463.7969,2109.0469 1464.4531,2108.7969 Q1464.8438,2108.6406 1465.2656,2108.2031 Q1465.5313,2107.9375 1465.6797,2107.8594 Q1465.8281,2107.7813 1466.0313,2107.7813 Q1466.3594,2107.7813 1466.6172,2108.0391 Q1466.875,2108.2969 1466.875,2108.6406 Q1466.875,2108.9844 1466.5313,2109.3906 Q1466.0313,2109.9688 1465.2344,2110.2969 Q1464.1563,2110.75 1462.8594,2110.75 Q1461.3438,2110.75 1460.1406,2110.125 Q1459.1563,2109.625 1458.4688,2108.5547 Q1457.7813,2107.4844 1457.7813,2106.2031 L1457.7813,2105.0469 Q1457.7813,2103.7188 1458.3984,2102.5703 Q1459.0156,2101.4219 1460.1094,2100.8047 Q1461.2031,2100.1875 1462.4375,2100.1875 Q1463.1719,2100.1875 1463.8203,2100.3516 Q1464.4688,2100.5156 1465.0156,2100.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="1482.75" y="2110.7285">Button</text><line style="stroke:#181818;stroke-width:0.5;" x1="1328" x2="1646" y1="2121" y2="2121"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1335" y="2132.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="1347" y="2139.5332">m_settings : ButtonSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="1328" x2="1646" y1="2146.6094" y2="2146.6094"/><ellipse cx="1338" cy="2160.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="1347" y="2165.1426">Button()</text><ellipse cx="1338" cy="2178.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="1347" y="2182.752">Button(const ButtonSettings&amp; settings)</text><ellipse cx="1338" cy="2196.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="1347" y="2200.3613">ctrl() : ButtonController&amp; {query}</text><ellipse cx="1338" cy="2213.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="1347" y="2217.9707">ctrl() : ButtonController&amp;</text><ellipse cx="1338" cy="2231.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="222" x="1347" y="2235.5801">settings() : ButtonSettings&amp; {query}</text><ellipse cx="1338" cy="2248.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1347" y="2253.1895">isNull() : bool {query}</text><ellipse cx="1338" cy="2266.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="1347" y="2270.7988">isOpen() : bool {query}</text><ellipse cx="1338" cy="2284.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="1347" y="2288.4082">isPressed() : bool {query}</text><ellipse cx="1338" cy="2301.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="291" x="1347" y="2306.0176">operator!=(const Button&amp; other) : bool {query}</text><ellipse cx="1338" cy="2319.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="1347" y="2323.627">operator==(const Button&amp; other) : bool {query}</text><ellipse cx="1338" cy="2337.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="1347" y="2341.2363">id() : int {query}</text><ellipse cx="1338" cy="2354.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="1347" y="2358.8457">begin() : void</text><ellipse cx="1338" cy="2372.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="1347" y="2376.4551">press() : void</text><ellipse cx="1338" cy="2389.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="1347" y="2394.0645">push() : void</text><ellipse cx="1338" cy="2407.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1347" y="2411.6738">release() : void</text></g><!--MD5=[ceb2c8e8a5a42aa74c4007e66357763f]
class SpaIot.ButtonController--><g id="elem_SpaIot.ButtonController"><rect codeLine="44" fill="#F1F1F1" height="417.7969" id="SpaIot.ButtonController" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="475" x="1053.5" y="2834"/><ellipse cx="1235.25" cy="2850" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1237.4375,2851.7656 L1233.2969,2851.7656 L1232.875,2852.7969 L1233.2969,2852.7969 Q1233.9063,2852.7969 1234.1719,2853.0313 Q1234.4375,2853.2656 1234.4375,2853.6563 Q1234.4375,2854.0313 1234.1719,2854.2656 Q1233.9063,2854.5 1233.2969,2854.5 L1231,2854.5 Q1230.3906,2854.5 1230.1328,2854.2656 Q1229.875,2854.0313 1229.875,2853.6406 Q1229.875,2853.2656 1230.1484,2853.0234 Q1230.4219,2852.7813 1231.0469,2852.7969 L1233.7188,2846.1406 L1232.6094,2846.1406 Q1232,2846.1406 1231.7344,2845.9063 Q1231.4688,2845.6719 1231.4688,2845.2813 Q1231.4688,2844.9063 1231.7344,2844.6719 Q1232,2844.4375 1232.6094,2844.4375 L1236.2813,2844.4375 L1239.6719,2852.7969 Q1240.2656,2852.7969 1240.4531,2852.9375 Q1240.8438,2853.2031 1240.8438,2853.6563 Q1240.8438,2854.0313 1240.5859,2854.2656 Q1240.3281,2854.5 1239.7188,2854.5 L1237.4219,2854.5 Q1236.8125,2854.5 1236.5469,2854.2656 Q1236.2813,2854.0313 1236.2813,2853.6406 Q1236.2813,2853.2656 1236.5469,2853.0313 Q1236.8125,2852.7969 1237.4219,2852.7969 L1237.8438,2852.7969 L1237.4375,2851.7656 Z M1236.7188,2850.0625 L1235.3594,2846.6875 L1233.9844,2850.0625 L1236.7188,2850.0625 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="103" x="1255.75" y="2855.7285">ButtonController</text><line style="stroke:#181818;stroke-width:0.5;" x1="1054.5" x2="1527.5" y1="2866" y2="2866"/><polygon fill="none" points="1064.5,2875.3047,1068.5,2879.3047,1064.5,2883.3047,1060.5,2879.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="1073.5" y="2884.5332">m_isopened : bool</text><polygon fill="none" points="1064.5,2892.9141,1068.5,2896.9141,1064.5,2900.9141,1060.5,2896.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="1073.5" y="2902.1426">m_selected : int</text><polygon fill="none" points="1064.5,2910.5234,1068.5,2914.5234,1064.5,2918.5234,1060.5,2914.5234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="1073.5" y="2919.752">m_name : mutable String</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1061.5" y="2930.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="329" x="1073.5" y="2937.3613">Register : static std::map&lt;String, ButtonController&amp;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1054.5" x2="1527.5" y1="2944.4375" y2="2944.4375"/><ellipse cx="1064.5" cy="2958.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="1073.5" y="2962.9707">ButtonController()</text><ellipse cx="1064.5" cy="2976.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="1073.5" y="2980.5801">ButtonController(const String&amp; name)</text><ellipse cx="1064.5" cy="2993.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="1073.5" y="2998.1895">~ButtonController()</text><ellipse cx="1064.5" cy="3011.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="363" x="1073.5" y="3015.7988">getFromRegister(const String&amp; name) : ButtonController&amp;</text><ellipse cx="1064.5" cy="3029.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="1073.5" y="3033.4082">name() : String&amp; {query}</text><ellipse cx="1064.5" cy="3046.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="449" x="1073.5" y="3051.0176">addToRegister(const String&amp; name, ButtonController&amp; controller) : bool</text><ellipse cx="1064.5" cy="3064.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1073.5" y="3068.627">isNull() : bool {query}</text><ellipse cx="1064.5" cy="3082.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="1073.5" y="3086.2363">isOpen() : bool {query}</text><ellipse cx="1064.5" cy="3099.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="1073.5" y="3103.8457">isSelected() : bool {query}</text><ellipse cx="1064.5" cy="3117.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353" x="1073.5" y="3121.4551">operator!=(const ButtonController&amp; other) : bool {query}</text><ellipse cx="1064.5" cy="3134.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="1073.5" y="3139.0645">operator==(const ButtonController&amp; other) : bool {query}</text><ellipse cx="1064.5" cy="3152.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="1073.5" y="3156.6738">registerContains(const String&amp; name) : bool</text><ellipse cx="1064.5" cy="3170.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="133" x="1073.5" y="3174.2832">select(int button) : int</text><ellipse cx="1064.5" cy="3187.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="1073.5" y="3191.8926">selected() : int {query}</text><ellipse cx="1064.5" cy="3205.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="82" x="1073.5" y="3209.502">begin() : void</text><ellipse cx="1064.5" cy="3222.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="100" x="1073.5" y="3227.1113">deselect() : void</text><ellipse cx="1064.5" cy="3240.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="1073.5" y="3244.7207">end() : void</text></g><!--MD5=[f3661e4561688efb30fa75bc4c31bf8e]
class SpaIot.ButtonSettings--><g id="elem_SpaIot.ButtonSettings"><rect codeLine="68" fill="#F1F1F1" height="294.5313" id="SpaIot.ButtonSettings" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="389" x="1096.5" y="2479"/><ellipse cx="1240.75" cy="2495" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1243.5156,2490.875 Q1243.6719,2490.6563 1243.8594,2490.5469 Q1244.0469,2490.4375 1244.2656,2490.4375 Q1244.6406,2490.4375 1244.875,2490.6953 Q1245.1094,2490.9531 1245.1094,2491.5625 L1245.1094,2493.0156 Q1245.1094,2493.625 1244.875,2493.8906 Q1244.6406,2494.1563 1244.2656,2494.1563 Q1243.9219,2494.1563 1243.7188,2493.9531 Q1243.5156,2493.7656 1243.4063,2493.25 Q1243.3594,2492.8906 1243.1719,2492.7031 Q1242.8438,2492.3281 1242.2344,2492.1094 Q1241.625,2491.8906 1241,2491.8906 Q1240.2344,2491.8906 1239.6016,2492.2188 Q1238.9688,2492.5469 1238.4766,2493.2969 Q1237.9844,2494.0469 1237.9844,2495.0781 L1237.9844,2496.1719 Q1237.9844,2497.4063 1238.875,2498.2266 Q1239.7656,2499.0469 1241.3594,2499.0469 Q1242.2969,2499.0469 1242.9531,2498.7969 Q1243.3438,2498.6406 1243.7656,2498.2031 Q1244.0313,2497.9375 1244.1797,2497.8594 Q1244.3281,2497.7813 1244.5313,2497.7813 Q1244.8594,2497.7813 1245.1172,2498.0391 Q1245.375,2498.2969 1245.375,2498.6406 Q1245.375,2498.9844 1245.0313,2499.3906 Q1244.5313,2499.9688 1243.7344,2500.2969 Q1242.6563,2500.75 1241.3594,2500.75 Q1239.8438,2500.75 1238.6406,2500.125 Q1237.6563,2499.625 1236.9688,2498.5547 Q1236.2813,2497.4844 1236.2813,2496.2031 L1236.2813,2495.0469 Q1236.2813,2493.7188 1236.8984,2492.5703 Q1237.5156,2491.4219 1238.6094,2490.8047 Q1239.7031,2490.1875 1240.9375,2490.1875 Q1241.6719,2490.1875 1242.3203,2490.3516 Q1242.9688,2490.5156 1243.5156,2490.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="1261.25" y="2500.7285">ButtonSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="1097.5" x2="1484.5" y1="2511" y2="2511"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1104.5" y="2522.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="1116.5" y="2529.5332">m_ctrlName : String</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1104.5" y="2539.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="57" x="1116.5" y="2547.1426">m_id : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1104.5" y="2557.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="212" x="1116.5" y="2564.752">m_ctrl : mutable ButtonController*</text><line style="stroke:#181818;stroke-width:0.5;" x1="1097.5" x2="1484.5" y1="2571.8281" y2="2571.8281"/><ellipse cx="1107.5" cy="2586.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="1116.5" y="2590.3613">ButtonSettings()</text><ellipse cx="1107.5" cy="2603.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="1116.5" y="2607.9707">ButtonSettings(const String&amp; controllerName, int buttonId)</text><ellipse cx="1107.5" cy="2621.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="355" x="1116.5" y="2625.5801">ButtonSettings(ButtonController&amp; controller, int buttonId)</text><ellipse cx="1107.5" cy="2638.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="1116.5" y="2643.1895">ctrl() : ButtonController&amp; {query}</text><ellipse cx="1107.5" cy="2656.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="1116.5" y="2660.7988">ctrl() : ButtonController&amp;</text><ellipse cx="1107.5" cy="2674.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="1116.5" y="2678.4082">controllerName() : String&amp; {query}</text><ellipse cx="1107.5" cy="2691.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1116.5" y="2696.0176">isNull() : bool {query}</text><ellipse cx="1107.5" cy="2709.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="342" x="1116.5" y="2713.627">operator!=(const ButtonSettings&amp; other) : bool {query}</text><ellipse cx="1107.5" cy="2727.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="345" x="1116.5" y="2731.2363">operator==(const ButtonSettings&amp; other) : bool {query}</text><ellipse cx="1107.5" cy="2744.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="1116.5" y="2748.8457">id() : int {query}</text><ellipse cx="1107.5" cy="2762.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="1116.5" y="2766.4551">setId(int id) : void</text></g><!--MD5=[0ab17dbf8de0327bdc0bf490b67b5e10]
class SpaIot.Cd4051--><g id="elem_SpaIot.Cd4051"><rect codeLine="85" fill="#F1F1F1" height="136.0469" id="SpaIot.Cd4051" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="504" x="549" y="3746.5"/><ellipse cx="771.75" cy="3762.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M774.5156,3758.375 Q774.6719,3758.1563 774.8594,3758.0469 Q775.0469,3757.9375 775.2656,3757.9375 Q775.6406,3757.9375 775.875,3758.1953 Q776.1094,3758.4531 776.1094,3759.0625 L776.1094,3760.5156 Q776.1094,3761.125 775.875,3761.3906 Q775.6406,3761.6563 775.2656,3761.6563 Q774.9219,3761.6563 774.7188,3761.4531 Q774.5156,3761.2656 774.4063,3760.75 Q774.3594,3760.3906 774.1719,3760.2031 Q773.8438,3759.8281 773.2344,3759.6094 Q772.625,3759.3906 772,3759.3906 Q771.2344,3759.3906 770.6016,3759.7188 Q769.9688,3760.0469 769.4766,3760.7969 Q768.9844,3761.5469 768.9844,3762.5781 L768.9844,3763.6719 Q768.9844,3764.9063 769.875,3765.7266 Q770.7656,3766.5469 772.3594,3766.5469 Q773.2969,3766.5469 773.9531,3766.2969 Q774.3438,3766.1406 774.7656,3765.7031 Q775.0313,3765.4375 775.1797,3765.3594 Q775.3281,3765.2813 775.5313,3765.2813 Q775.8594,3765.2813 776.1172,3765.5391 Q776.375,3765.7969 776.375,3766.1406 Q776.375,3766.4844 776.0313,3766.8906 Q775.5313,3767.4688 774.7344,3767.7969 Q773.6563,3768.25 772.3594,3768.25 Q770.8438,3768.25 769.6406,3767.625 Q768.6563,3767.125 767.9688,3766.0547 Q767.2813,3764.9844 767.2813,3763.7031 L767.2813,3762.5469 Q767.2813,3761.2188 767.8984,3760.0703 Q768.5156,3758.9219 769.6094,3758.3047 Q770.7031,3757.6875 771.9375,3757.6875 Q772.6719,3757.6875 773.3203,3757.8516 Q773.9688,3758.0156 774.5156,3758.375 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="792.25" y="3768.2285">Cd4051</text><line style="stroke:#181818;stroke-width:0.5;" x1="550" x2="1052" y1="3778.5" y2="3778.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="550" x2="1052" y1="3786.5" y2="3786.5"/><ellipse cx="560" cy="3800.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="569" y="3805.0332">Cd4051()</text><ellipse cx="560" cy="3818.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="569" y="3822.6426">Cd4051(const std::initializer_list&lt;int&gt;&amp; spins, int inhPin)</text><ellipse cx="560" cy="3836.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="478" x="569" y="3840.252">Cd4051(const String&amp; name, const std::initializer_list&lt;int&gt;&amp; spins, int inhPin)</text><ellipse cx="560" cy="3853.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209" x="569" y="3857.8613">Cd4051(int A, int B, int C, int INH)</text><ellipse cx="560" cy="3871.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="569" y="3875.4707">Cd4051(const String&amp; name, int A, int B, int C, int INH)</text></g><!--MD5=[9a0b46f1f7d8701560c15ba08c471702]
class SpaIot.ControlPanel--><g id="elem_SpaIot.ControlPanel"><rect codeLine="93" fill="#F1F1F1" height="629.1094" id="SpaIot.ControlPanel" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="530" x="1222" y="1400"/><ellipse cx="1441.75" cy="1416" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1444.5156,1411.875 Q1444.6719,1411.6563 1444.8594,1411.5469 Q1445.0469,1411.4375 1445.2656,1411.4375 Q1445.6406,1411.4375 1445.875,1411.6953 Q1446.1094,1411.9531 1446.1094,1412.5625 L1446.1094,1414.0156 Q1446.1094,1414.625 1445.875,1414.8906 Q1445.6406,1415.1563 1445.2656,1415.1563 Q1444.9219,1415.1563 1444.7188,1414.9531 Q1444.5156,1414.7656 1444.4063,1414.25 Q1444.3594,1413.8906 1444.1719,1413.7031 Q1443.8438,1413.3281 1443.2344,1413.1094 Q1442.625,1412.8906 1442,1412.8906 Q1441.2344,1412.8906 1440.6016,1413.2188 Q1439.9688,1413.5469 1439.4766,1414.2969 Q1438.9844,1415.0469 1438.9844,1416.0781 L1438.9844,1417.1719 Q1438.9844,1418.4063 1439.875,1419.2266 Q1440.7656,1420.0469 1442.3594,1420.0469 Q1443.2969,1420.0469 1443.9531,1419.7969 Q1444.3438,1419.6406 1444.7656,1419.2031 Q1445.0313,1418.9375 1445.1797,1418.8594 Q1445.3281,1418.7813 1445.5313,1418.7813 Q1445.8594,1418.7813 1446.1172,1419.0391 Q1446.375,1419.2969 1446.375,1419.6406 Q1446.375,1419.9844 1446.0313,1420.3906 Q1445.5313,1420.9688 1444.7344,1421.2969 Q1443.6563,1421.75 1442.3594,1421.75 Q1440.8438,1421.75 1439.6406,1421.125 Q1438.6563,1420.625 1437.9688,1419.5547 Q1437.2813,1418.4844 1437.2813,1417.2031 L1437.2813,1416.0469 Q1437.2813,1414.7188 1437.8984,1413.5703 Q1438.5156,1412.4219 1439.6094,1411.8047 Q1440.7031,1411.1875 1441.9375,1411.1875 Q1442.6719,1411.1875 1443.3203,1411.3516 Q1443.9688,1411.5156 1444.5156,1411.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="1462.25" y="1421.7285">ControlPanel</text><line style="stroke:#181818;stroke-width:0.5;" x1="1223" x2="1751" y1="1432" y2="1432"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1230" y="1443.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="1242" y="1450.5332">m_isopened : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1230" y="1460.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="208" x="1242" y="1468.1426">m_instance : static ControlPanel*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1230" y="1478.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="1242" y="1485.752">m_button : std::map&lt;int, Button&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1230" y="1496.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="1242" y="1503.3613">m_btnsettings : std::map&lt;int, ButtonSettings&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1223" x2="1751" y1="1510.4375" y2="1510.4375"/><polygon fill="#FFFF44" points="1233,1519.7422,1237,1523.7422,1233,1527.7422,1229,1523.7422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="320" x="1242" y="1528.9707">ControlPanel(const HardwareSettings&amp; hwsettings)</text><polygon fill="#FFFF44" points="1233,1537.3516,1237,1541.3516,1233,1545.3516,1229,1541.3516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="1242" y="1546.5801">ControlPanel()</text><ellipse cx="1233" cy="1559.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="1242" y="1564.1895">~ControlPanel()</text><ellipse cx="1233" cy="1577.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="1242" y="1581.7988">button(int key) : Button&amp;</text><ellipse cx="1233" cy="1595.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="398" x="1242" y="1599.4082">singleton(const HardwareSettings&amp; hwsettings) : ControlPanel&amp;</text><ellipse cx="1233" cy="1612.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="362" x="1242" y="1617.0176">singleton(const String&amp; hwSettingsName) : ControlPanel&amp;</text><ellipse cx="1233" cy="1630.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="170" x="1242" y="1634.627">singleton() : ControlPanel&amp;</text><ellipse cx="1233" cy="1648.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="410" x="1242" y="1652.2363">getInstance(const HardwareSettings&amp; hwsettings) : ControlPanel*</text><ellipse cx="1233" cy="1665.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="374" x="1242" y="1669.8457">getInstance(const String&amp; hwSettingsName) : ControlPanel*</text><ellipse cx="1233" cy="1683.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="182" x="1242" y="1687.4551">getInstance() : ControlPanel*</text><ellipse cx="1233" cy="1700.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="1242" y="1705.0645">hasButton(int key) : bool {query}</text><ellipse cx="1233" cy="1718.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="1242" y="1722.6738">isOpen() : bool {query}</text><polygon fill="#FFFF44" points="1233,1731.0547,1237,1735.0547,1233,1739.0547,1229,1735.0547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="1242" y="1740.2832">makeButtons() : bool</text><ellipse cx="1233" cy="1753.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="1242" y="1757.8926">pushButton(int key) : bool</text><ellipse cx="1233" cy="1771.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="1242" y="1775.502">setDesiredTemp(uint16_t temp) : bool</text><ellipse cx="1233" cy="1788.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="1242" y="1793.1113">setSanitizerTime(uint16_t time) : bool</text><polygon fill="#FFFF44" points="1233,1801.4922,1237,1805.4922,1233,1809.4922,1229,1805.4922" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="1242" y="1810.7207">buttons() : std::map&lt;int , Button&gt;&amp; {query}</text><ellipse cx="1233" cy="1824.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352" x="1242" y="1828.3301">buttonSettings() : std::map&lt;int , ButtonSettings&gt; {query}</text><ellipse cx="1233" cy="1841.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="418" x="1242" y="1845.9395">waitForDesiredTemp(unsigned long MaxWaitingTimeMs) : uint16_t</text><ellipse cx="1233" cy="1859.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="1242" y="1863.5488">setBubble(bool v) : uint8_t</text><ellipse cx="1233" cy="1876.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="1242" y="1881.1582">setFilter(bool v) : uint8_t</text><ellipse cx="1233" cy="1894.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="1242" y="1898.7676">setHeater(bool v) : uint8_t</text><ellipse cx="1233" cy="1912.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="1242" y="1916.377">setJet(bool v) : uint8_t</text><polygon fill="#FFFF44" points="1233,1924.7578,1237,1928.7578,1233,1932.7578,1229,1928.7578" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="1242" y="1933.9863">setKeyOn(int key, bool v) : uint8_t</text><ellipse cx="1233" cy="1947.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="1242" y="1951.5957">setPower(bool v) : uint8_t</text><ellipse cx="1233" cy="1964.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="1242" y="1969.2051">begin(unsigned long waitingTimeMs) : void</text><ellipse cx="1233" cy="1982.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="504" x="1242" y="1986.8145">begin(const HardwareSettings&amp; hwsettings, unsigned long waitingTimeMs) : void</text><ellipse cx="1233" cy="2000.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="468" x="1242" y="2004.4238">begin(const String&amp; hwSettingsName, unsigned long waitingTimeMs) : void</text><ellipse cx="1233" cy="2017.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="1242" y="2022.0332">end() : void</text></g><!--MD5=[0c18072ef90c53b7935f9f1f11583239]
class SpaIot.FrameDecoder--><g id="elem_SpaIot.FrameDecoder"><rect codeLine="129" fill="#F1F1F1" height="1298.2656" id="SpaIot.FrameDecoder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="730" x="1048" y="42"/><ellipse cx="1361.25" cy="58" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1364.0156,53.875 Q1364.1719,53.6563 1364.3594,53.5469 Q1364.5469,53.4375 1364.7656,53.4375 Q1365.1406,53.4375 1365.375,53.6953 Q1365.6094,53.9531 1365.6094,54.5625 L1365.6094,56.0156 Q1365.6094,56.625 1365.375,56.8906 Q1365.1406,57.1563 1364.7656,57.1563 Q1364.4219,57.1563 1364.2188,56.9531 Q1364.0156,56.7656 1363.9063,56.25 Q1363.8594,55.8906 1363.6719,55.7031 Q1363.3438,55.3281 1362.7344,55.1094 Q1362.125,54.8906 1361.5,54.8906 Q1360.7344,54.8906 1360.1016,55.2188 Q1359.4688,55.5469 1358.9766,56.2969 Q1358.4844,57.0469 1358.4844,58.0781 L1358.4844,59.1719 Q1358.4844,60.4063 1359.375,61.2266 Q1360.2656,62.0469 1361.8594,62.0469 Q1362.7969,62.0469 1363.4531,61.7969 Q1363.8438,61.6406 1364.2656,61.2031 Q1364.5313,60.9375 1364.6797,60.8594 Q1364.8281,60.7813 1365.0313,60.7813 Q1365.3594,60.7813 1365.6172,61.0391 Q1365.875,61.2969 1365.875,61.6406 Q1365.875,61.9844 1365.5313,62.3906 Q1365.0313,62.9688 1364.2344,63.2969 Q1363.1563,63.75 1361.8594,63.75 Q1360.3438,63.75 1359.1406,63.125 Q1358.1563,62.625 1357.4688,61.5547 Q1356.7813,60.4844 1356.7813,59.2031 L1356.7813,58.0469 Q1356.7813,56.7188 1357.3984,55.5703 Q1358.0156,54.4219 1359.1094,53.8047 Q1360.2031,53.1875 1361.4375,53.1875 Q1362.1719,53.1875 1362.8203,53.3516 Q1363.4688,53.5156 1364.0156,53.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1381.75" y="63.7285">FrameDecoder</text><line style="stroke:#181818;stroke-width:0.5;" x1="1049" x2="1777" y1="74" y2="74"/><polygon fill="none" points="1059,83.3047,1063,87.3047,1059,91.3047,1055,87.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="180" x="1068" y="92.5332">m_busSettings : BusSettings</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1056" y="102.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="1068" y="110.1426">m_isopened : bool</text><polygon fill="none" points="1059,118.5234,1063,122.5234,1059,126.5234,1055,122.5234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="299" x="1068" y="127.752">ResetErrorFrameCounter : static const uint32_t</text><polygon fill="none" points="1059,136.1328,1063,140.1328,1059,144.1328,1055,140.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="391" x="1068" y="145.3613">SetupTrigUnitChangeFrameCounterMax : static const uint32_t</text><polygon fill="none" points="1059,153.7422,1063,157.7422,1059,161.7422,1055,157.7422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="274" x="1068" y="162.9707">FramePeriodUs : static const unsigned long</text><polygon fill="none" points="1059,171.3516,1063,175.3516,1059,179.3516,1055,175.3516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="131" x="1068" y="180.5801">m_dataPin : static int</text><polygon fill="none" points="1059,188.9609,1063,192.9609,1059,196.9609,1055,192.9609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="223" x="1068" y="198.1895">m_frameLedBubble : static uint16_t</text><polygon fill="none" points="1059,206.5703,1063,210.5703,1059,214.5703,1055,210.5703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="211" x="1068" y="215.7988">m_frameLedFilter : static uint16_t</text><polygon fill="none" points="1059,224.1797,1063,228.1797,1059,232.1797,1055,228.1797" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="221" x="1068" y="233.4082">m_frameLedHeater : static uint16_t</text><polygon fill="none" points="1059,241.7891,1063,245.7891,1059,249.7891,1055,245.7891" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="278" x="1068" y="251.0176">m_frameLedHeaterReached : static uint16_t</text><polygon fill="none" points="1059,259.3984,1063,263.3984,1059,267.3984,1055,263.3984" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="197" x="1068" y="268.627">m_frameLedJet : static uint16_t</text><polygon fill="none" points="1059,277.0078,1063,281.0078,1059,285.0078,1055,281.0078" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="218" x="1068" y="286.2363">m_frameLedPower : static uint16_t</text><polygon fill="none" points="1059,294.6172,1063,298.6172,1059,302.6172,1055,298.6172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="233" x="1068" y="303.8457">m_frameLedSanitizer : static uint16_t</text><polygon fill="none" points="1059,312.2266,1063,316.2266,1059,320.2266,1055,316.2266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="1068" y="321.4551">m_isDisplayBlink : static volatile bool</text><polygon fill="none" points="1059,329.8359,1063,333.8359,1059,337.8359,1055,333.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="333" x="1068" y="339.0645">m_counterTempUnitChanged : static volatile uint16_t</text><polygon fill="none" points="1059,347.4453,1063,351.4453,1059,355.4453,1055,351.4453" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="1068" y="356.6738">m_desiredTemp : static volatile uint16_t</text><polygon fill="none" points="1059,365.0547,1063,369.0547,1059,373.0547,1055,369.0547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="247" x="1068" y="374.2832">m_displayValue : static volatile uint16_t</text><polygon fill="none" points="1059,382.6641,1063,386.6641,1059,390.6641,1055,386.6641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="234" x="1068" y="391.8926">m_errorValue : static volatile uint16_t</text><polygon fill="none" points="1059,400.2734,1063,404.2734,1059,408.2734,1055,404.2734" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="231" x="1068" y="409.502">m_frameShift : static volatile uint16_t</text><polygon fill="none" points="1059,417.8828,1063,421.8828,1059,425.8828,1055,421.8828" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="1068" y="427.1113">m_frameValue : static volatile uint16_t</text><polygon fill="none" points="1059,435.4922,1063,439.4922,1059,443.4922,1055,439.4922" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="286" x="1068" y="444.7207">m_latestDesiredTemp : static volatile uint16_t</text><polygon fill="none" points="1059,453.1016,1063,457.1016,1059,461.1016,1055,457.1016" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="283" x="1068" y="462.3301">m_latestDisplayValue : static volatile uint16_t</text><polygon fill="none" points="1059,470.7109,1063,474.7109,1059,478.7109,1055,474.7109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="265" x="1068" y="479.9395">m_latestLedStatus : static volatile uint16_t</text><polygon fill="none" points="1059,488.3203,1063,492.3203,1059,496.3203,1055,492.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="275" x="1068" y="497.5488">m_latestWaterTemp : static volatile uint16_t</text><polygon fill="none" points="1059,505.9297,1063,509.9297,1059,513.9297,1055,509.9297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="1068" y="515.1582">m_rawStatus : static volatile uint16_t</text><polygon fill="none" points="1059,523.5391,1063,527.5391,1059,531.5391,1055,527.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="1068" y="532.7676">m_sanitizerTime : static volatile uint16_t</text><polygon fill="none" points="1059,541.1484,1063,545.1484,1059,549.1484,1055,545.1484" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="338" x="1068" y="550.377">m_stableDisplayValueCounter : static volatile uint16_t</text><polygon fill="none" points="1059,558.7578,1063,562.7578,1059,566.7578,1055,562.7578" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="320" x="1068" y="567.9863">m_stableLedStatusCounter : static volatile uint16_t</text><polygon fill="none" points="1059,576.3672,1063,580.3672,1059,584.3672,1055,580.3672" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="330" x="1068" y="585.5957">m_stableWaterTempCounter : static volatile uint16_t</text><polygon fill="none" points="1059,593.9766,1063,597.9766,1059,601.9766,1055,597.9766" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="237" x="1068" y="603.2051">m_unsetDigits : static volatile uint16_t</text><polygon fill="none" points="1059,611.5859,1063,615.5859,1059,619.5859,1055,615.5859" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="237" x="1068" y="620.8145">m_waterTemp : static volatile uint16_t</text><polygon fill="none" points="1059,629.1953,1063,633.1953,1059,637.1953,1055,633.1953" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="254" x="1068" y="638.4238">m_frameCounter : static volatile uint32_t</text><polygon fill="none" points="1059,646.8047,1063,650.8047,1059,654.8047,1055,650.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="258" x="1068" y="656.0332">m_frameDropped : static volatile uint32_t</text><polygon fill="none" points="1059,664.4141,1063,668.4141,1059,672.4141,1055,668.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="361" x="1068" y="673.6426">m_lastBlackDisplayFrameCounter : static volatile uint32_t</text><polygon fill="none" points="1059,682.0234,1063,686.0234,1059,690.0234,1055,686.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="363" x="1068" y="691.252">m_lastErrorChangeFrameCounter : static volatile uint32_t</text><polygon fill="none" points="1059,699.6328,1063,703.6328,1059,707.6328,1055,703.6328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="335" x="1068" y="708.8613">m_lastSanitizerFrameCounter : static volatile uint32_t</text><polygon fill="none" points="1059,717.2422,1063,721.2422,1059,725.2422,1055,721.2422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="391" x="1068" y="726.4707">m_lastTempUnitChangeFrameCounter : static volatile uint32_t</text><polygon fill="none" points="1059,734.8516,1063,738.8516,1059,742.8516,1055,738.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="241" x="1068" y="744.0801">m_lastTempUnit : static volatile uint8_t</text><polygon fill="none" points="1059,752.4609,1063,756.4609,1059,760.4609,1055,756.4609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="1068" y="761.6895">m_ledSettings : std::map&lt;int, LedSettings&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1049" x2="1777" y1="768.7656" y2="768.7656"/><polygon fill="#FFFF44" points="1059,778.0703,1063,782.0703,1059,786.0703,1055,782.0703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="507" x="1068" y="787.2988">FrameDecoder(const BusSettings&amp; bus, const std::map&lt;int, LedSettings&gt;&amp; leds)</text><polygon fill="#FFFF44" points="1059,795.6797,1063,799.6797,1059,803.6797,1055,799.6797" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="1068" y="804.9082">FrameDecoder()</text><ellipse cx="1059" cy="818.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="1068" y="822.5176">~FrameDecoder()</text><ellipse cx="1059" cy="835.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="1068" y="840.127">busSettings() : BusSettings&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1056" y="850.5078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="239" x="1068" y="857.7363">clkRisingInterrupt() : IRAM_ATTR void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1056" y="868.1172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="249" x="1068" y="875.3457">holdRisingInterrupt() : IRAM_ATTR void</text><ellipse cx="1059" cy="888.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="1068" y="892.9551">hasLed(int key) : bool {query}</text><ellipse cx="1059" cy="906.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="1068" y="910.5645">isOpen() : bool {query}</text><ellipse cx="1059" cy="923.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="1068" y="928.1738">isSetupModeTriggered() : bool {query}</text><ellipse cx="1059" cy="941.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="1068" y="945.7832">ledSettings() : std::map&lt;int , LedSettings&gt; {query}</text><polygon fill="#FFFF44" points="1059,954.1641,1063,958.1641,1059,962.1641,1055,958.1641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="383" x="1068" y="963.3926">convertDisplayToCelsius(uint16_t m_displayValue) : uint16_t</text><ellipse cx="1059" cy="976.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="1068" y="981.002">desiredTemp() : uint16_t {query}</text><ellipse cx="1059" cy="994.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="1068" y="998.6113">error() : uint16_t</text><ellipse cx="1059" cy="1011.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="1068" y="1016.2207">rawStatus() : uint16_t {query}</text><ellipse cx="1059" cy="1029.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="1068" y="1033.8301">sanitizerTime() : uint16_t {query}</text><ellipse cx="1059" cy="1047.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="457" x="1068" y="1051.4395">waitForWaterTemp(unsigned long MaxWaitingTimeMs) : uint16_t {query}</text><ellipse cx="1059" cy="1064.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="1068" y="1069.0488">waterTemp() : uint16_t {query}</text><ellipse cx="1059" cy="1082.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="1068" y="1086.6582">frameCounter() : uint32_t {query}</text><ellipse cx="1059" cy="1100.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="1068" y="1104.2676">frameDropped() : uint32_t {query}</text><ellipse cx="1059" cy="1117.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="1068" y="1121.877">isBubbleOn() : uint8_t {query}</text><ellipse cx="1059" cy="1135.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="1068" y="1139.4863">isDisplayBlink() : uint8_t {query}</text><ellipse cx="1059" cy="1152.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="1068" y="1157.0957">isFilterOn() : uint8_t {query}</text><ellipse cx="1059" cy="1170.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="1068" y="1174.7051">isHeatReached() : uint8_t {query}</text><ellipse cx="1059" cy="1188.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="1068" y="1192.3145">isHeaterOn() : uint8_t {query}</text><ellipse cx="1059" cy="1205.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="1068" y="1209.9238">isJetOn() : uint8_t {query}</text><ellipse cx="1059" cy="1223.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209" x="1068" y="1227.5332">isLedOn(int key) : uint8_t {query}</text><ellipse cx="1059" cy="1240.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="1068" y="1245.1426">isPowerOn() : uint8_t {query}</text><ellipse cx="1059" cy="1258.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="1068" y="1262.752">isSanitizerOn() : uint8_t {query}</text><ellipse cx="1059" cy="1276.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="456" x="1068" y="1280.3613">waitUntilDisplayBlink(unsigned long MaxWaitingTimeMs) : uint8_t {query}</text><ellipse cx="1059" cy="1293.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="1068" y="1297.9707">begin(unsigned long waitingTimeMs) : void</text><ellipse cx="1059" cy="1311.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="704" x="1068" y="1315.5801">begin(const BusSettings&amp; settings, const std::map&lt;int, LedSettings&gt;&amp; leds, unsigned long waitingTimeMs) : void</text><ellipse cx="1059" cy="1328.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="1068" y="1333.1895">end() : void</text></g><!--MD5=[01f0d4cc18d38a866d87c544a5caf86c]
class SpaIot.HardwareSettings--><g id="elem_SpaIot.HardwareSettings"><rect codeLine="203" fill="#F1F1F1" height="329.75" id="SpaIot.HardwareSettings" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="840" x="155" y="526"/><ellipse cx="515.25" cy="542" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M518.0156,537.875 Q518.1719,537.6563 518.3594,537.5469 Q518.5469,537.4375 518.7656,537.4375 Q519.1406,537.4375 519.375,537.6953 Q519.6094,537.9531 519.6094,538.5625 L519.6094,540.0156 Q519.6094,540.625 519.375,540.8906 Q519.1406,541.1563 518.7656,541.1563 Q518.4219,541.1563 518.2188,540.9531 Q518.0156,540.7656 517.9063,540.25 Q517.8594,539.8906 517.6719,539.7031 Q517.3438,539.3281 516.7344,539.1094 Q516.125,538.8906 515.5,538.8906 Q514.7344,538.8906 514.1016,539.2188 Q513.4688,539.5469 512.9766,540.2969 Q512.4844,541.0469 512.4844,542.0781 L512.4844,543.1719 Q512.4844,544.4063 513.375,545.2266 Q514.2656,546.0469 515.8594,546.0469 Q516.7969,546.0469 517.4531,545.7969 Q517.8438,545.6406 518.2656,545.2031 Q518.5313,544.9375 518.6797,544.8594 Q518.8281,544.7813 519.0313,544.7813 Q519.3594,544.7813 519.6172,545.0391 Q519.875,545.2969 519.875,545.6406 Q519.875,545.9844 519.5313,546.3906 Q519.0313,546.9688 518.2344,547.2969 Q517.1563,547.75 515.8594,547.75 Q514.3438,547.75 513.1406,547.125 Q512.1563,546.625 511.4688,545.5547 Q510.7813,544.4844 510.7813,543.2031 L510.7813,542.0469 Q510.7813,540.7188 511.3984,539.5703 Q512.0156,538.4219 513.1094,537.8047 Q514.2031,537.1875 515.4375,537.1875 Q516.1719,537.1875 516.8203,537.3516 Q517.4688,537.5156 518.0156,537.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="535.75" y="547.7285">HardwareSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="156" x2="994" y1="558" y2="558"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="163" y="569.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="175" y="576.5332">m_bus : const BusSettings*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="163" y="586.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="175" y="594.1426">m_buttons : const std::map&lt;int, ButtonSettings&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="163" y="604.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="175" y="611.752">m_leds : const std::map&lt;int, LedSettings&gt;*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="163" y="622.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="175" y="629.3613">Register : static std::map&lt;String, const HardwareSettings*&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="156" x2="994" y1="636.4375" y2="636.4375"/><ellipse cx="166" cy="650.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="175" y="654.9707">HardwareSettings()</text><ellipse cx="166" cy="668.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="814" x="175" y="672.5801">HardwareSettings(const BusSettings&amp; bus, const std::map&lt;int, LedSettings&gt;&amp; leds, const std::map&lt;int, ButtonSettings&gt;&amp; buttons)</text><ellipse cx="166" cy="685.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="175" y="690.1895">bus() : BusSettings&amp; {query}</text><ellipse cx="166" cy="703.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="175" y="707.7988">getFromRegister(const String&amp; name) : HardwareSettings&amp;</text><ellipse cx="166" cy="721.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="485" x="175" y="725.4082">addToRegister(const String&amp; name, const HardwareSettings&amp; settings) : bool</text><ellipse cx="166" cy="738.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="175" y="743.0176">isNull() : bool {query}</text><ellipse cx="166" cy="756.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="361" x="175" y="760.627">operator!=(const HardwareSettings&amp; other) : bool {query}</text><ellipse cx="166" cy="774.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="175" y="778.2363">operator==(const HardwareSettings&amp; other) : bool {query}</text><ellipse cx="166" cy="791.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="175" y="795.8457">registerContains(const String&amp; name) : bool</text><ellipse cx="166" cy="809.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="317" x="175" y="813.4551">buttons() : std::map&lt;int , ButtonSettings&gt;&amp; {query}</text><ellipse cx="166" cy="826.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="175" y="831.0645">leds() : std::map&lt;int , LedSettings&gt;&amp; {query}</text><ellipse cx="166" cy="844.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="175" y="848.6738">print(Print&amp; out) : void {query}</text></g><!--MD5=[2510c0a1d62bf8ba30be78be01ab8cef]
class SpaIot.LedSettings--><g id="elem_SpaIot.LedSettings"><rect codeLine="222" fill="#F1F1F1" height="206.4844" id="SpaIot.LedSettings" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="354" x="833" y="1611.5"/><ellipse cx="968.25" cy="1627.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M971.0156,1623.375 Q971.1719,1623.1563 971.3594,1623.0469 Q971.5469,1622.9375 971.7656,1622.9375 Q972.1406,1622.9375 972.375,1623.1953 Q972.6094,1623.4531 972.6094,1624.0625 L972.6094,1625.5156 Q972.6094,1626.125 972.375,1626.3906 Q972.1406,1626.6563 971.7656,1626.6563 Q971.4219,1626.6563 971.2188,1626.4531 Q971.0156,1626.2656 970.9063,1625.75 Q970.8594,1625.3906 970.6719,1625.2031 Q970.3438,1624.8281 969.7344,1624.6094 Q969.125,1624.3906 968.5,1624.3906 Q967.7344,1624.3906 967.1016,1624.7188 Q966.4688,1625.0469 965.9766,1625.7969 Q965.4844,1626.5469 965.4844,1627.5781 L965.4844,1628.6719 Q965.4844,1629.9063 966.375,1630.7266 Q967.2656,1631.5469 968.8594,1631.5469 Q969.7969,1631.5469 970.4531,1631.2969 Q970.8438,1631.1406 971.2656,1630.7031 Q971.5313,1630.4375 971.6797,1630.3594 Q971.8281,1630.2813 972.0313,1630.2813 Q972.3594,1630.2813 972.6172,1630.5391 Q972.875,1630.7969 972.875,1631.1406 Q972.875,1631.4844 972.5313,1631.8906 Q972.0313,1632.4688 971.2344,1632.7969 Q970.1563,1633.25 968.8594,1633.25 Q967.3438,1633.25 966.1406,1632.625 Q965.1563,1632.125 964.4688,1631.0547 Q963.7813,1629.9844 963.7813,1628.7031 L963.7813,1627.5469 Q963.7813,1626.2188 964.3984,1625.0703 Q965.0156,1623.9219 966.1094,1623.3047 Q967.2031,1622.6875 968.4375,1622.6875 Q969.1719,1622.6875 969.8203,1622.8516 Q970.4688,1623.0156 971.0156,1623.375 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="988.75" y="1633.2285">LedSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="834" x2="1186" y1="1643.5" y2="1643.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="841" y="1654.8047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="853" y="1662.0332">m_order : uint8_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="834" x2="1186" y1="1669.1094" y2="1669.1094"/><ellipse cx="844" cy="1683.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="853" y="1687.6426">LedSettings()</text><ellipse cx="844" cy="1701.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="853" y="1705.252">LedSettings(const uint8_t order)</text><ellipse cx="844" cy="1718.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="853" y="1722.8613">isNull() : bool {query}</text><ellipse cx="844" cy="1736.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="853" y="1740.4707">operator!=(const LedSettings&amp; other) : bool {query}</text><ellipse cx="844" cy="1753.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="853" y="1758.0801">operator==(const LedSettings&amp; other) : bool {query}</text><ellipse cx="844" cy="1771.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="853" y="1775.6895">frame() : uint16_t {query}</text><ellipse cx="844" cy="1789.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="853" y="1793.2988">order() : uint8_t {query}</text><ellipse cx="844" cy="1806.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="853" y="1810.9082">setOrder(const uint8_t order) : void</text></g><!--MD5=[898141c6e6c72091a3d23b9893b66a57]
class SpaIot.Multiplexer--><g id="elem_SpaIot.Multiplexer"><rect codeLine="234" fill="#F1F1F1" height="294.5313" id="SpaIot.Multiplexer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="521" x="540.5" y="3312"/><ellipse cx="716.75" cy="3328" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M719.5156,3323.875 Q719.6719,3323.6563 719.8594,3323.5469 Q720.0469,3323.4375 720.2656,3323.4375 Q720.6406,3323.4375 720.875,3323.6953 Q721.1094,3323.9531 721.1094,3324.5625 L721.1094,3326.0156 Q721.1094,3326.625 720.875,3326.8906 Q720.6406,3327.1563 720.2656,3327.1563 Q719.9219,3327.1563 719.7188,3326.9531 Q719.5156,3326.7656 719.4063,3326.25 Q719.3594,3325.8906 719.1719,3325.7031 Q718.8438,3325.3281 718.2344,3325.1094 Q717.625,3324.8906 717,3324.8906 Q716.2344,3324.8906 715.6016,3325.2188 Q714.9688,3325.5469 714.4766,3326.2969 Q713.9844,3327.0469 713.9844,3328.0781 L713.9844,3329.1719 Q713.9844,3330.4063 714.875,3331.2266 Q715.7656,3332.0469 717.3594,3332.0469 Q718.2969,3332.0469 718.9531,3331.7969 Q719.3438,3331.6406 719.7656,3331.2031 Q720.0313,3330.9375 720.1797,3330.8594 Q720.3281,3330.7813 720.5313,3330.7813 Q720.8594,3330.7813 721.1172,3331.0391 Q721.375,3331.2969 721.375,3331.6406 Q721.375,3331.9844 721.0313,3332.3906 Q720.5313,3332.9688 719.7344,3333.2969 Q718.6563,3333.75 717.3594,3333.75 Q715.8438,3333.75 714.6406,3333.125 Q713.6563,3332.625 712.9688,3331.5547 Q712.2813,3330.4844 712.2813,3329.2031 L712.2813,3328.0469 Q712.2813,3326.7188 712.8984,3325.5703 Q713.5156,3324.4219 714.6094,3323.8047 Q715.7031,3323.1875 716.9375,3323.1875 Q717.6719,3323.1875 718.3203,3323.3516 Q718.9688,3323.5156 719.5156,3323.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="737.25" y="3333.7285">Multiplexer</text><rect fill="#FFFFFF" height="17.0938" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="91" x="973.5" y="3309"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="89" x="974.5" y="3322.457">template&lt;int W&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="541.5" x2="1060.5" y1="3344" y2="3344"/><polygon fill="none" points="551.5,3353.3047,555.5,3357.3047,551.5,3361.3047,547.5,3357.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="560.5" y="3362.5332">m_inh : int</text><polygon fill="none" points="551.5,3370.9141,555.5,3374.9141,551.5,3378.9141,547.5,3374.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="560.5" y="3380.1426">m_spin : std::vector&lt;int&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="541.5" x2="1060.5" y1="3387.2188" y2="3387.2188"/><ellipse cx="551.5" cy="3401.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="560.5" y="3405.752">Multiplexer(const std::initializer_list&lt;int&gt;&amp; spins, int inhPin)</text><ellipse cx="551.5" cy="3419.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="495" x="560.5" y="3423.3613">Multiplexer(const String&amp; name, const std::initializer_list&lt;int&gt;&amp; spins, int inhPin)</text><ellipse cx="551.5" cy="3436.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="560.5" y="3440.9707">Multiplexer()</text><ellipse cx="551.5" cy="3454.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="560.5" y="3458.5801">isNull() : bool {query}</text><ellipse cx="551.5" cy="3471.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="560.5" y="3476.1895">operator==(const ButtonController&amp; other) : bool {query}</text><ellipse cx="551.5" cy="3489.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="560.5" y="3493.7988">select(int button) : int</text><ellipse cx="551.5" cy="3507.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="560.5" y="3511.4082">selectPin(int key) : int {query}</text><ellipse cx="551.5" cy="3524.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="560.5" y="3529.0176">size() : int {query}</text><ellipse cx="551.5" cy="3542.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="560.5" y="3546.627">begin() : void</text><ellipse cx="551.5" cy="3560.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="560.5" y="3564.2363">deselect() : void</text><ellipse cx="551.5" cy="3577.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="560.5" y="3581.8457">end() : void</text><ellipse cx="551.5" cy="3595.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="560.5" y="3599.4551">setSelectPin(int key, int pin) : void</text></g><!--MD5=[41520719889c274611cce6030b67a8c1]
class SpaIot.Pcf8574Mux--><g id="elem_SpaIot.Pcf8574Mux"><rect codeLine="251" fill="#F1F1F1" height="241.7031" id="SpaIot.Pcf8574Mux" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="588" x="1097" y="3338.5"/><ellipse cx="1348.25" cy="3354.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1351.0156,3350.375 Q1351.1719,3350.1563 1351.3594,3350.0469 Q1351.5469,3349.9375 1351.7656,3349.9375 Q1352.1406,3349.9375 1352.375,3350.1953 Q1352.6094,3350.4531 1352.6094,3351.0625 L1352.6094,3352.5156 Q1352.6094,3353.125 1352.375,3353.3906 Q1352.1406,3353.6563 1351.7656,3353.6563 Q1351.4219,3353.6563 1351.2188,3353.4531 Q1351.0156,3353.2656 1350.9063,3352.75 Q1350.8594,3352.3906 1350.6719,3352.2031 Q1350.3438,3351.8281 1349.7344,3351.6094 Q1349.125,3351.3906 1348.5,3351.3906 Q1347.7344,3351.3906 1347.1016,3351.7188 Q1346.4688,3352.0469 1345.9766,3352.7969 Q1345.4844,3353.5469 1345.4844,3354.5781 L1345.4844,3355.6719 Q1345.4844,3356.9063 1346.375,3357.7266 Q1347.2656,3358.5469 1348.8594,3358.5469 Q1349.7969,3358.5469 1350.4531,3358.2969 Q1350.8438,3358.1406 1351.2656,3357.7031 Q1351.5313,3357.4375 1351.6797,3357.3594 Q1351.8281,3357.2813 1352.0313,3357.2813 Q1352.3594,3357.2813 1352.6172,3357.5391 Q1352.875,3357.7969 1352.875,3358.1406 Q1352.875,3358.4844 1352.5313,3358.8906 Q1352.0313,3359.4688 1351.2344,3359.7969 Q1350.1563,3360.25 1348.8594,3360.25 Q1347.3438,3360.25 1346.1406,3359.625 Q1345.1563,3359.125 1344.4688,3358.0547 Q1343.7813,3356.9844 1343.7813,3355.7031 L1343.7813,3354.5469 Q1343.7813,3353.2188 1344.3984,3352.0703 Q1345.0156,3350.9219 1346.1094,3350.3047 Q1347.2031,3349.6875 1348.4375,3349.6875 Q1349.1719,3349.6875 1349.8203,3349.8516 Q1350.4688,3350.0156 1351.0156,3350.375 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="1368.75" y="3360.2285">Pcf8574Mux</text><line style="stroke:#181818;stroke-width:0.5;" x1="1098" x2="1684" y1="3370.5" y2="3370.5"/><polygon fill="none" points="1108,3379.8047,1112,3383.8047,1108,3387.8047,1104,3383.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="1117" y="3389.0332">m_pcf : TwoWireSlave</text><polygon fill="none" points="1108,3397.4141,1112,3401.4141,1108,3405.4141,1104,3401.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="1117" y="3406.6426">m_idle : uint8_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="1098" x2="1684" y1="3413.7188" y2="3413.7188"/><ellipse cx="1108" cy="3428.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="431" x="1117" y="3432.252">Pcf8574Mux(uint8_t slaveAddress, TwoWire&amp; bus, uint8_t idleValue)</text><ellipse cx="1108" cy="3445.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="562" x="1117" y="3449.8613">Pcf8574Mux(const String&amp; name, uint8_t slaveAddress, TwoWire&amp; bus, uint8_t idleValue)</text><ellipse cx="1108" cy="3463.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1117" y="3467.4707">isNull() : bool {query}</text><ellipse cx="1108" cy="3480.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="1117" y="3485.0801">operator==(const ButtonController&amp; other) : bool {query}</text><ellipse cx="1108" cy="3498.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="1117" y="3502.6895">select(int button) : int</text><ellipse cx="1108" cy="3516.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="1117" y="3520.2988">address() : uint8_t {query}</text><ellipse cx="1108" cy="3533.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="1117" y="3537.9082">begin() : void</text><ellipse cx="1108" cy="3551.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="1117" y="3555.5176">deselect() : void</text><ellipse cx="1108" cy="3568.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="1117" y="3573.127">end() : void</text></g><!--MD5=[ec90c1c006b0ae9bd8a9da771227b37e]
class SpaIot.TwoWireSlave--><g id="elem_SpaIot.TwoWireSlave"><rect codeLine="265" fill="#F1F1F1" height="294.5313" id="SpaIot.TwoWireSlave" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="440" x="1171" y="3667"/><ellipse cx="1341.75" cy="3683" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1344.5156,3678.875 Q1344.6719,3678.6563 1344.8594,3678.5469 Q1345.0469,3678.4375 1345.2656,3678.4375 Q1345.6406,3678.4375 1345.875,3678.6953 Q1346.1094,3678.9531 1346.1094,3679.5625 L1346.1094,3681.0156 Q1346.1094,3681.625 1345.875,3681.8906 Q1345.6406,3682.1563 1345.2656,3682.1563 Q1344.9219,3682.1563 1344.7188,3681.9531 Q1344.5156,3681.7656 1344.4063,3681.25 Q1344.3594,3680.8906 1344.1719,3680.7031 Q1343.8438,3680.3281 1343.2344,3680.1094 Q1342.625,3679.8906 1342,3679.8906 Q1341.2344,3679.8906 1340.6016,3680.2188 Q1339.9688,3680.5469 1339.4766,3681.2969 Q1338.9844,3682.0469 1338.9844,3683.0781 L1338.9844,3684.1719 Q1338.9844,3685.4063 1339.875,3686.2266 Q1340.7656,3687.0469 1342.3594,3687.0469 Q1343.2969,3687.0469 1343.9531,3686.7969 Q1344.3438,3686.6406 1344.7656,3686.2031 Q1345.0313,3685.9375 1345.1797,3685.8594 Q1345.3281,3685.7813 1345.5313,3685.7813 Q1345.8594,3685.7813 1346.1172,3686.0391 Q1346.375,3686.2969 1346.375,3686.6406 Q1346.375,3686.9844 1346.0313,3687.3906 Q1345.5313,3687.9688 1344.7344,3688.2969 Q1343.6563,3688.75 1342.3594,3688.75 Q1340.8438,3688.75 1339.6406,3688.125 Q1338.6563,3687.625 1337.9688,3686.5547 Q1337.2813,3685.4844 1337.2813,3684.2031 L1337.2813,3683.0469 Q1337.2813,3681.7188 1337.8984,3680.5703 Q1338.5156,3679.4219 1339.6094,3678.8047 Q1340.7031,3678.1875 1341.9375,3678.1875 Q1342.6719,3678.1875 1343.3203,3678.3516 Q1343.9688,3678.5156 1344.5156,3678.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="1362.25" y="3688.7285">TwoWireSlave</text><line style="stroke:#181818;stroke-width:0.5;" x1="1172" x2="1610" y1="3699" y2="3699"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1179" y="3710.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="118" x="1191" y="3717.5332">m_bus : TwoWire&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1179" y="3727.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="1191" y="3735.1426">m_address : uint8_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="1172" x2="1610" y1="3742.2188" y2="3742.2188"/><ellipse cx="1182" cy="3756.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="1191" y="3760.752">TwoWireSlave(uint8_t slaveAddress, TwoWire&amp; bus)</text><ellipse cx="1182" cy="3774.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="1191" y="3778.3613">bus() : TwoWire&amp; {query}</text><ellipse cx="1182" cy="3791.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="1191" y="3795.9707">read() : int</text><ellipse cx="1182" cy="3809.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="241" x="1191" y="3813.5801">read(uint8_t* values, uint16_t len) : int</text><ellipse cx="1182" cy="3826.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="1191" y="3831.1895">read(uint8_t dataAddress) : int</text><ellipse cx="1182" cy="3844.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="1191" y="3848.7988">read(uint8_t dataAddress, uint8_t* values, uint16_t len) : int</text><ellipse cx="1182" cy="3862.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="1191" y="3866.4082">write(uint8_t value) : int</text><ellipse cx="1182" cy="3879.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="1191" y="3884.0176">write(const uint8_t* values, uint16_t len) : int</text><ellipse cx="1182" cy="3897.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="1191" y="3901.627">write(uint8_t dataAddress, uint8_t value) : int</text><ellipse cx="1182" cy="3915.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="414" x="1191" y="3919.2363">write(uint8_t dataAddress, const uint8_t* values, uint16_t len) : int</text><ellipse cx="1182" cy="3932.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="1191" y="3936.8457">address() : uint8_t {query}</text><ellipse cx="1182" cy="3950.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="1191" y="3954.4551">setAddress(uint8_t slaveAddress) : void</text></g><!--MD5=[480a832a49b87db85871162ca6733495]
class SpaIot.Key--><g id="elem_SpaIot.Key"><rect codeLine="282" fill="#F1F1F1" height="224.0938" id="SpaIot.Key" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="98" x="22" y="579"/><ellipse cx="55.9" cy="595" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M54.7594,595.7969 L54.7594,598.2969 L59.0875,598.2969 L59.0875,597.375 Q59.0875,596.7656 59.3297,596.5 Q59.5719,596.2344 59.9469,596.2344 Q60.3219,596.2344 60.5563,596.5 Q60.7906,596.7656 60.7906,597.375 L60.7906,600 L52.7906,600 Q52.1656,600 51.9078,599.7656 Q51.65,599.5313 51.65,599.1406 Q51.65,598.7656 51.9156,598.5313 Q52.1813,598.2969 52.7906,598.2969 L53.0563,598.2969 L53.0563,591.6406 L52.7906,591.6406 Q52.1656,591.6406 51.9078,591.4063 Q51.65,591.1719 51.65,590.7813 Q51.65,590.4063 51.9078,590.1719 Q52.1656,589.9375 52.7906,589.9375 L60.4156,589.9375 L60.4156,592.5313 Q60.4156,593.1406 60.1891,593.3984 Q59.9625,593.6563 59.5719,593.6563 Q59.1969,593.6563 58.9625,593.3984 Q58.7281,593.1406 58.7281,592.5313 L58.7281,591.6406 L54.7594,591.6406 L54.7594,594.0938 L56.2438,594.0938 Q56.2438,593.4375 56.3688,593.25 Q56.6344,592.8438 57.1031,592.8438 Q57.4781,592.8438 57.7125,593.1016 Q57.9469,593.3594 57.9469,593.9688 L57.9469,595.9375 Q57.9469,596.4844 57.8219,596.6719 Q57.5563,597.0625 57.1031,597.0625 Q56.6344,597.0625 56.3688,596.6563 Q56.2438,596.4688 56.2438,595.7969 L54.7594,595.7969 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="24" x="74.1" y="600.7285">Key</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="119" y1="611" y2="611"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="44" x="28" y="629.5332">Bubble</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="28" y="647.1426">Filter</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="28" y="664.752">HeatReached</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="28" y="682.3613">Heater</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="18" x="28" y="699.9707">Jet</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="28" y="717.5801">Power</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="54" x="28" y="735.1895">Sanitizer</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="28" y="752.7988">TempDown</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="28" y="770.4082">TempUnit</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="53" x="28" y="788.0176">TempUp</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="119" y1="795.0938" y2="795.0938"/></g><!--MD5=[6f17c93706066deebe5d057df2d62242]
reverse link SpaIot.ButtonController to SpaIot.Multiplexer--><g id="link_SpaIot.ButtonController_SpaIot.Multiplexer"><path codeLine="302" d="M1037.6,3258.36 C1016.22,3276.44 994.92,3294.46 974.36,3311.85 " fill="none" id="SpaIot.ButtonController-backto-SpaIot.Multiplexer" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1033.39,3252.75,1053.18,3245.18,1042.43,3263.44,1033.39,3252.75" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[be0e1b39319030b874d0d37dadd3fa84]
reverse link SpaIot.ButtonController to SpaIot.Pcf8574Mux--><g id="link_SpaIot.ButtonController_SpaIot.Pcf8574Mux"><path codeLine="305" d="M1345.98,3271.88 C1351.5,3294.76 1356.93,3317.3 1362.02,3338.37 " fill="none" id="SpaIot.ButtonController-backto-SpaIot.Pcf8574Mux" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1339.11,3273.24,1341.22,3252.16,1352.72,3269.96,1339.11,3273.24" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[23089f4f2f5da13248f6406f050e518c]
reverse link SpaIot.FrameDecoder to SpaIot.ControlPanel--><g id="link_SpaIot.FrameDecoder_SpaIot.ControlPanel"><path codeLine="308" d="M1461.42,1360.41 C1462.39,1373.77 1463.35,1386.97 1464.29,1399.96 " fill="none" id="SpaIot.FrameDecoder-backto-SpaIot.ControlPanel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1454.41,1360.47,1459.94,1340.02,1468.37,1359.46,1454.41,1360.47" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[1ee032c063d584db60a5c4f2546ed949]
reverse link SpaIot.Multiplexer to SpaIot.Cd4051--><g id="link_SpaIot.Multiplexer_SpaIot.Cd4051"><path codeLine="311" d="M801,3627.37 C801,3669.46 801,3712.28 801,3746.23 " fill="none" id="SpaIot.Multiplexer-backto-SpaIot.Cd4051" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="794,3627.14,801,3607.14,808,3627.14,794,3627.14" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[ae6c80e2b53f628fab146f94feddc5ac]
reverse link SpaIot.Button to SpaIot.ButtonSettings--><g id="link_SpaIot.Button_SpaIot.ButtonSettings"><path codeLine="319" d="M1393.98,2430.84 C1385.45,2446.95 1376.88,2463.17 1368.51,2478.99 " fill="none" id="SpaIot.Button-backto-SpaIot.ButtonSettings" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1400.18,2419.12,1393.8414,2422.5584,1394.5775,2429.7319,1400.916,2426.2934,1400.18,2419.12" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0b6294ff073a5a47c3eed1918d4dfd05]
reverse link SpaIot.ButtonController to SpaIot.ButtonController--><g id="link_SpaIot.ButtonController_SpaIot.ButtonController"><path codeLine="322" d="M1539.48,2988.99 C1554.49,3001.84 1563.5,3019.84 1563.5,3043 C1563.5,3071.23 1550.11,3091.8 1528.78,3104.71 " fill="none" id="SpaIot.ButtonController-backto-SpaIot.ButtonController" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1528.78,2981.29,1531.3185,2988.0395,1538.5252,2988.2923,1535.9867,2981.5427,1528.78,2981.29" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0afe041de2f9da6bfa9ca37123c00629]
reverse link SpaIot.ButtonSettings to SpaIot.ButtonController--><g id="link_SpaIot.ButtonSettings_SpaIot.ButtonController"><path codeLine="325" d="M1291,2787.47 C1291,2802.66 1291,2818.21 1291,2833.76 " fill="none" id="SpaIot.ButtonSettings-backto-SpaIot.ButtonController" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1291,2774.22,1287,2780.22,1291,2786.22,1295,2780.22,1291,2774.22" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[8c86c3d6ca4d14c15a4653b2d06225af]
reverse link SpaIot.ControlPanel to SpaIot.Button--><g id="link_SpaIot.ControlPanel_SpaIot.Button"><path codeLine="328" d="M1487,2042.64 C1487,2058.4 1487,2073.89 1487,2088.86 " fill="none" id="SpaIot.ControlPanel-backto-SpaIot.Button" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1487,2029.33,1483,2035.33,1487,2041.33,1491,2035.33,1487,2029.33" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[2583c2f4e4bfc1e7d3b570349d2f5e80]
reverse link SpaIot.ControlPanel to SpaIot.ButtonSettings--><g id="link_SpaIot.ControlPanel_SpaIot.ButtonSettings"><path codeLine="331" d="M1323.39,2041.73 C1318.33,2057.52 1313.82,2073.32 1310,2089 C1278.56,2218.04 1276.24,2369.65 1280.35,2478.73 " fill="none" id="SpaIot.ControlPanel-backto-SpaIot.ButtonSettings" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1327.56,2029.07,1321.8833,2033.5169,1323.8048,2040.4673,1329.4815,2036.0204,1327.56,2029.07" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[928735fb3df1dd4a87b246f4c1d0e775]
reverse link SpaIot.ControlPanel to SpaIot.ControlPanel--><g id="link_SpaIot.ControlPanel_SpaIot.ControlPanel"><path codeLine="334" d="M1762.13,1646.28 C1777.71,1662.77 1787,1685.51 1787,1714.5 C1787,1749.18 1773.71,1774.91 1752.26,1791.71 " fill="none" id="SpaIot.ControlPanel-backto-SpaIot.ControlPanel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1752.26,1637.29,1754.0022,1644.2875,1761.1315,1645.3706,1759.3893,1638.3731,1752.26,1637.29" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[26a1f8e1c3cfe707e8704d4888bb5846]
reverse link SpaIot.FrameDecoder to SpaIot.BusSettings--><g id="link_SpaIot.FrameDecoder_SpaIot.BusSettings"><path codeLine="337" d="M1037.64,1334.82 C1035.44,1336.56 1033.22,1338.29 1031,1340 C952.33,1400.44 897.77,1343.83 816,1400 C750.74,1444.83 696.55,1513.97 656.89,1575.93 " fill="none" id="SpaIot.FrameDecoder-backto-SpaIot.BusSettings" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1047.88,1326.55,1040.6991,1327.2092,1038.5457,1334.0913,1045.7266,1333.4321,1047.88,1326.55" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7637435efd590cb82bcedc18eb6f59d5]
reverse link SpaIot.FrameDecoder to SpaIot.LedSettings--><g id="link_SpaIot.FrameDecoder_SpaIot.LedSettings"><path codeLine="340" d="M1152.49,1352.34 C1112.76,1453.03 1076.39,1545.21 1050.34,1611.24 " fill="none" id="SpaIot.FrameDecoder-backto-SpaIot.LedSettings" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1157.35,1340.02,1151.4278,1344.1343,1152.9479,1351.1834,1158.8701,1347.0691,1157.35,1340.02" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[a5234dab1fa83adbc4ca8076ac407a28]
reverse link SpaIot.HardwareSettings to SpaIot.BusSettings--><g id="link_SpaIot.HardwareSettings_SpaIot.BusSettings"><path codeLine="343" d="M576.39,869.17 C577.96,1070.03 580.49,1393.22 581.92,1575.98 " fill="none" id="SpaIot.HardwareSettings-backto-SpaIot.BusSettings" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="576.29,856.12,572.3363,862.1506,576.3823,868.1196,580.336,862.0891,576.29,856.12" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fe0cbae54e91012857da0eed78209ae9]
reverse link SpaIot.HardwareSettings to SpaIot.ButtonSettings--><g id="link_SpaIot.HardwareSettings_SpaIot.ButtonSettings"><path codeLine="346" d="M477.94,868.01 C344.59,1135.64 143.4,1653.43 350,2029 C508.25,2316.69 870.38,2485.12 1096.42,2565.96 " fill="none" id="SpaIot.HardwareSettings-backto-SpaIot.ButtonSettings" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="483.84,856.24,477.5737,859.8085,478.4576,866.9652,484.7239,863.3967,483.84,856.24" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[9110124992559e67e16bb6391fab2b1a]
reverse link SpaIot.HardwareSettings to SpaIot.HardwareSettings--><g id="link_SpaIot.HardwareSettings_SpaIot.HardwareSettings"><path codeLine="349" d="M760.81,520.48 C895.48,464.01 1030,520.85 1030,691 C1030,866.28 887.24,921.31 748.62,856.1 " fill="none" id="SpaIot.HardwareSettings-backto-SpaIot.HardwareSettings" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="748.62,525.9,755.7277,527.1168,759.5847,521.0239,752.477,519.8071,748.62,525.9" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[99a295d3a38766457b6df14def9e30ab]
reverse link SpaIot.HardwareSettings to SpaIot.LedSettings--><g id="link_SpaIot.HardwareSettings_SpaIot.LedSettings"><path codeLine="352" d="M650,868.13 C741.29,1082.5 892.4,1437.35 966.42,1611.16 " fill="none" id="SpaIot.HardwareSettings-backto-SpaIot.LedSettings" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="644.89,856.12,643.5647,863.2083,649.5979,867.1579,650.9233,860.0696,644.89,856.12" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[cb42191b0a61da58a7c23fcbb307764c]
reverse link SpaIot.Pcf8574Mux to SpaIot.TwoWireSlave--><g id="link_SpaIot.Pcf8574Mux_SpaIot.TwoWireSlave"><path codeLine="355" d="M1391,3593.67 C1391,3617.59 1391,3642.65 1391,3666.93 " fill="none" id="SpaIot.Pcf8574Mux-backto-SpaIot.TwoWireSlave" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1391,3580.5,1387,3586.5,1391,3592.5,1395,3586.5,1391,3580.5" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d83bf3f0e804b7b672f4b595ecc592ba]
@startuml





/' Objects '/

namespace SpaIot {
	class BusSettings {
		+BusSettings(const int dataPin, const int clkPin, const int holdPin)
		+BusSettings(const std::initializer_list<int>& pins)
		+BusSettings()
		+isNull() : bool {query}
		+operator!=(const BusSettings& other) : bool {query}
		+operator==(const BusSettings& other) : bool {query}
		+clkPin() : int {query}
		+dataPin() : int {query}
		+holdPin() : int {query}
		-m_pin : std::vector<int>
		+setClkPin(int pin) : void
		+setDataPin(int pin) : void
		+setHoldPin(int pin) : void
	}

	class Button {
		+Button()
		+Button(const ButtonSettings& settings)
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		-m_settings : ButtonSettings
		+settings() : ButtonSettings& {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isPressed() : bool {query}
		+operator!=(const Button& other) : bool {query}
		+operator==(const Button& other) : bool {query}
		+id() : int {query}
		+begin() : void
		+press() : void
		+push() : void
		+release() : void
	}

	abstract class ButtonController {
		+ButtonController()
		+ButtonController(const String& name)
		+~ButtonController()
		+{static} getFromRegister(const String& name) : ButtonController&
		+name() : String& {query}
		+{static} addToRegister(const String& name, ButtonController& controller) : bool
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isSelected() : bool {query}
		#m_isopened : bool
		+operator!=(const ButtonController& other) : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		#m_selected : int
		+{abstract} select(int button) : int
		+selected() : int {query}
		#m_name : mutable String
		-{static} Register : static std::map<String, ButtonController&>
		+{abstract} begin() : void
		+{abstract} deselect() : void
		+end() : void
	}

	class ButtonSettings {
		+ButtonSettings()
		+ButtonSettings(const String& controllerName, int buttonId)
		+ButtonSettings(ButtonController& controller, int buttonId)
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		-m_ctrlName : String
		+controllerName() : String& {query}
		+isNull() : bool {query}
		+operator!=(const ButtonSettings& other) : bool {query}
		+operator==(const ButtonSettings& other) : bool {query}
		+id() : int {query}
		-m_id : int
		-m_ctrl : mutable ButtonController*
		+setId(int id) : void
	}

	class Cd4051 {
		+Cd4051()
		+Cd4051(const std::initializer_list<int>& spins, int inhPin)
		+Cd4051(const String& name, const std::initializer_list<int>& spins, int inhPin)
		+Cd4051(int A, int B, int C, int INH)
		+Cd4051(const String& name, int A, int B, int C, int INH)
	}

	class ControlPanel {
		#ControlPanel(const HardwareSettings& hwsettings)
		#ControlPanel()
		+~ControlPanel()
		+button(int key) : Button&
		+{static} singleton(const HardwareSettings& hwsettings) : ControlPanel&
		+{static} singleton(const String& hwSettingsName) : ControlPanel&
		+{static} singleton() : ControlPanel&
		+{static} getInstance(const HardwareSettings& hwsettings) : ControlPanel*
		+{static} getInstance(const String& hwSettingsName) : ControlPanel*
		+{static} getInstance() : ControlPanel*
		+hasButton(int key) : bool {query}
		+isOpen() : bool {query}
		-m_isopened : bool
		#makeButtons() : bool
		+pushButton(int key) : bool
		+setDesiredTemp(uint16_t temp) : bool
		+setSanitizerTime(uint16_t time) : bool
		-{static} m_instance : static ControlPanel*
		#buttons() : std::map<int , Button>& {query}
		+buttonSettings() : std::map<int , ButtonSettings> {query}
		-m_button : std::map<int, Button>
		-m_btnsettings : std::map<int, ButtonSettings>
		+waitForDesiredTemp(unsigned long MaxWaitingTimeMs) : uint16_t
		+setBubble(bool v) : uint8_t
		+setFilter(bool v) : uint8_t
		+setHeater(bool v) : uint8_t
		+setJet(bool v) : uint8_t
		#setKeyOn(int key, bool v) : uint8_t
		+setPower(bool v) : uint8_t
		+begin(unsigned long waitingTimeMs) : void
		+begin(const HardwareSettings& hwsettings, unsigned long waitingTimeMs) : void
		+begin(const String& hwSettingsName, unsigned long waitingTimeMs) : void
		+end() : void
	}

	class FrameDecoder {
		#FrameDecoder(const BusSettings& bus, const std::map<int, LedSettings>& leds)
		#FrameDecoder()
		+~FrameDecoder()
		#m_busSettings : BusSettings
		+busSettings() : BusSettings& {query}
		-{static} clkRisingInterrupt() : IRAM_ATTR void
		-{static} holdRisingInterrupt() : IRAM_ATTR void
		+hasLed(int key) : bool {query}
		+isOpen() : bool {query}
		+isSetupModeTriggered() : bool {query}
		-m_isopened : bool
		#{static} ResetErrorFrameCounter : static const uint32_t
		#{static} SetupTrigUnitChangeFrameCounterMax : static const uint32_t
		#{static} FramePeriodUs : static const unsigned long
		#{static} m_dataPin : static int
		#{static} m_frameLedBubble : static uint16_t
		#{static} m_frameLedFilter : static uint16_t
		#{static} m_frameLedHeater : static uint16_t
		#{static} m_frameLedHeaterReached : static uint16_t
		#{static} m_frameLedJet : static uint16_t
		#{static} m_frameLedPower : static uint16_t
		#{static} m_frameLedSanitizer : static uint16_t
		#{static} m_isDisplayBlink : static volatile bool
		#{static} m_counterTempUnitChanged : static volatile uint16_t
		#{static} m_desiredTemp : static volatile uint16_t
		#{static} m_displayValue : static volatile uint16_t
		#{static} m_errorValue : static volatile uint16_t
		#{static} m_frameShift : static volatile uint16_t
		#{static} m_frameValue : static volatile uint16_t
		#{static} m_latestDesiredTemp : static volatile uint16_t
		#{static} m_latestDisplayValue : static volatile uint16_t
		#{static} m_latestLedStatus : static volatile uint16_t
		#{static} m_latestWaterTemp : static volatile uint16_t
		#{static} m_rawStatus : static volatile uint16_t
		#{static} m_sanitizerTime : static volatile uint16_t
		#{static} m_stableDisplayValueCounter : static volatile uint16_t
		#{static} m_stableLedStatusCounter : static volatile uint16_t
		#{static} m_stableWaterTempCounter : static volatile uint16_t
		#{static} m_unsetDigits : static volatile uint16_t
		#{static} m_waterTemp : static volatile uint16_t
		#{static} m_frameCounter : static volatile uint32_t
		#{static} m_frameDropped : static volatile uint32_t
		#{static} m_lastBlackDisplayFrameCounter : static volatile uint32_t
		#{static} m_lastErrorChangeFrameCounter : static volatile uint32_t
		#{static} m_lastSanitizerFrameCounter : static volatile uint32_t
		#{static} m_lastTempUnitChangeFrameCounter : static volatile uint32_t
		#{static} m_lastTempUnit : static volatile uint8_t
		+ledSettings() : std::map<int , LedSettings> {query}
		#m_ledSettings : std::map<int, LedSettings>
		#{static} convertDisplayToCelsius(uint16_t m_displayValue) : uint16_t
		+desiredTemp() : uint16_t {query}
		+error() : uint16_t
		+rawStatus() : uint16_t {query}
		+sanitizerTime() : uint16_t {query}
		+waitForWaterTemp(unsigned long MaxWaitingTimeMs) : uint16_t {query}
		+waterTemp() : uint16_t {query}
		+frameCounter() : uint32_t {query}
		+frameDropped() : uint32_t {query}
		+isBubbleOn() : uint8_t {query}
		+isDisplayBlink() : uint8_t {query}
		+isFilterOn() : uint8_t {query}
		+isHeatReached() : uint8_t {query}
		+isHeaterOn() : uint8_t {query}
		+isJetOn() : uint8_t {query}
		+isLedOn(int key) : uint8_t {query}
		+isPowerOn() : uint8_t {query}
		+isSanitizerOn() : uint8_t {query}
		+waitUntilDisplayBlink(unsigned long MaxWaitingTimeMs) : uint8_t {query}
		+begin(unsigned long waitingTimeMs) : void
		+begin(const BusSettings& settings, const std::map<int, LedSettings>& leds, unsigned long waitingTimeMs) : void
		+end() : void
	}

	class HardwareSettings {
		+HardwareSettings()
		+HardwareSettings(const BusSettings& bus, const std::map<int, LedSettings>& leds, const std::map<int, ButtonSettings>& buttons)
		+bus() : BusSettings& {query}
		+{static} getFromRegister(const String& name) : HardwareSettings&
		+{static} addToRegister(const String& name, const HardwareSettings& settings) : bool
		+isNull() : bool {query}
		+operator!=(const HardwareSettings& other) : bool {query}
		+operator==(const HardwareSettings& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		-m_bus : const BusSettings*
		-m_buttons : const std::map<int, ButtonSettings>*
		-m_leds : const std::map<int, LedSettings>*
		-{static} Register : static std::map<String, const HardwareSettings*>
		+buttons() : std::map<int , ButtonSettings>& {query}
		+leds() : std::map<int , LedSettings>& {query}
		+print(Print& out) : void {query}
	}

	class LedSettings {
		+LedSettings()
		+LedSettings(const uint8_t order)
		+isNull() : bool {query}
		+operator!=(const LedSettings& other) : bool {query}
		+operator==(const LedSettings& other) : bool {query}
		+frame() : uint16_t {query}
		-m_order : uint8_t
		+order() : uint8_t {query}
		+setOrder(const uint8_t order) : void
	}

	class Multiplexer <template<int W>> {
		+Multiplexer(const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer(const String& name, const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer()
		+isNull() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		#m_inh : int
		+select(int button) : int
		+selectPin(int key) : int {query}
		+size() : int {query}
		#m_spin : std::vector<int>
		+begin() : void
		+deselect() : void
		+end() : void
		+setSelectPin(int key, int pin) : void
	}

	class Pcf8574Mux {
		+Pcf8574Mux(uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		+Pcf8574Mux(const String& name, uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		#m_pcf : TwoWireSlave
		+isNull() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+select(int button) : int
		+address() : uint8_t {query}
		#m_idle : uint8_t
		+begin() : void
		+deselect() : void
		+end() : void
	}

	class TwoWireSlave {
		+TwoWireSlave(uint8_t slaveAddress, TwoWire& bus)
		+bus() : TwoWire& {query}
		-m_bus : TwoWire&
		+read() : int
		+read(uint8_t* values, uint16_t len) : int
		+read(uint8_t dataAddress) : int
		+read(uint8_t dataAddress, uint8_t* values, uint16_t len) : int
		+write(uint8_t value) : int
		+write(const uint8_t* values, uint16_t len) : int
		+write(uint8_t dataAddress, uint8_t value) : int
		+write(uint8_t dataAddress, const uint8_t* values, uint16_t len) : int
		+address() : uint8_t {query}
		-m_address : uint8_t
		+setAddress(uint8_t slaveAddress) : void
	}

	enum Key {
		Bubble
		Filter
		HeatReached
		Heater
		Jet
		Power
		Sanitizer
		TempDown
		TempUnit
		TempUp
	}
}





/' Inheritance relationships '/

SpaIot.ButtonController <|- - SpaIot.Multiplexer


SpaIot.ButtonController <|- - SpaIot.Pcf8574Mux


SpaIot.FrameDecoder <|- - SpaIot.ControlPanel


SpaIot.Multiplexer <|- - SpaIot.Cd4051





/' Aggregation relationships '/

SpaIot.Button *- - SpaIot.ButtonSettings


SpaIot.ButtonController *- - SpaIot.ButtonController


SpaIot.ButtonSettings o- - SpaIot.ButtonController


SpaIot.ControlPanel *- - SpaIot.Button


SpaIot.ControlPanel *- - SpaIot.ButtonSettings


SpaIot.ControlPanel o- - SpaIot.ControlPanel


SpaIot.FrameDecoder *- - SpaIot.BusSettings


SpaIot.FrameDecoder *- - SpaIot.LedSettings


SpaIot.HardwareSettings o- - SpaIot.BusSettings


SpaIot.HardwareSettings *- - SpaIot.ButtonSettings


SpaIot.HardwareSettings o- - SpaIot.HardwareSettings


SpaIot.HardwareSettings *- - SpaIot.LedSettings


SpaIot.Pcf8574Mux *- - SpaIot.TwoWireSlave






/' Nested objects '/



@enduml

@startuml






namespace SpaIot {
	class BusSettings {
		+BusSettings(const int dataPin, const int clkPin, const int holdPin)
		+BusSettings(const std::initializer_list<int>& pins)
		+BusSettings()
		+isNull() : bool {query}
		+operator!=(const BusSettings& other) : bool {query}
		+operator==(const BusSettings& other) : bool {query}
		+clkPin() : int {query}
		+dataPin() : int {query}
		+holdPin() : int {query}
		-m_pin : std::vector<int>
		+setClkPin(int pin) : void
		+setDataPin(int pin) : void
		+setHoldPin(int pin) : void
	}

	class Button {
		+Button()
		+Button(const ButtonSettings& settings)
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		-m_settings : ButtonSettings
		+settings() : ButtonSettings& {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isPressed() : bool {query}
		+operator!=(const Button& other) : bool {query}
		+operator==(const Button& other) : bool {query}
		+id() : int {query}
		+begin() : void
		+press() : void
		+push() : void
		+release() : void
	}

	abstract class ButtonController {
		+ButtonController()
		+ButtonController(const String& name)
		+~ButtonController()
		+{static} getFromRegister(const String& name) : ButtonController&
		+name() : String& {query}
		+{static} addToRegister(const String& name, ButtonController& controller) : bool
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isSelected() : bool {query}
		#m_isopened : bool
		+operator!=(const ButtonController& other) : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		#m_selected : int
		+{abstract} select(int button) : int
		+selected() : int {query}
		#m_name : mutable String
		-{static} Register : static std::map<String, ButtonController&>
		+{abstract} begin() : void
		+{abstract} deselect() : void
		+end() : void
	}

	class ButtonSettings {
		+ButtonSettings()
		+ButtonSettings(const String& controllerName, int buttonId)
		+ButtonSettings(ButtonController& controller, int buttonId)
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		-m_ctrlName : String
		+controllerName() : String& {query}
		+isNull() : bool {query}
		+operator!=(const ButtonSettings& other) : bool {query}
		+operator==(const ButtonSettings& other) : bool {query}
		+id() : int {query}
		-m_id : int
		-m_ctrl : mutable ButtonController*
		+setId(int id) : void
	}

	class Cd4051 {
		+Cd4051()
		+Cd4051(const std::initializer_list<int>& spins, int inhPin)
		+Cd4051(const String& name, const std::initializer_list<int>& spins, int inhPin)
		+Cd4051(int A, int B, int C, int INH)
		+Cd4051(const String& name, int A, int B, int C, int INH)
	}

	class ControlPanel {
		#ControlPanel(const HardwareSettings& hwsettings)
		#ControlPanel()
		+~ControlPanel()
		+button(int key) : Button&
		+{static} singleton(const HardwareSettings& hwsettings) : ControlPanel&
		+{static} singleton(const String& hwSettingsName) : ControlPanel&
		+{static} singleton() : ControlPanel&
		+{static} getInstance(const HardwareSettings& hwsettings) : ControlPanel*
		+{static} getInstance(const String& hwSettingsName) : ControlPanel*
		+{static} getInstance() : ControlPanel*
		+hasButton(int key) : bool {query}
		+isOpen() : bool {query}
		-m_isopened : bool
		#makeButtons() : bool
		+pushButton(int key) : bool
		+setDesiredTemp(uint16_t temp) : bool
		+setSanitizerTime(uint16_t time) : bool
		-{static} m_instance : static ControlPanel*
		#buttons() : std::map<int , Button>& {query}
		+buttonSettings() : std::map<int , ButtonSettings> {query}
		-m_button : std::map<int, Button>
		-m_btnsettings : std::map<int, ButtonSettings>
		+waitForDesiredTemp(unsigned long MaxWaitingTimeMs) : uint16_t
		+setBubble(bool v) : uint8_t
		+setFilter(bool v) : uint8_t
		+setHeater(bool v) : uint8_t
		+setJet(bool v) : uint8_t
		#setKeyOn(int key, bool v) : uint8_t
		+setPower(bool v) : uint8_t
		+begin(unsigned long waitingTimeMs) : void
		+begin(const HardwareSettings& hwsettings, unsigned long waitingTimeMs) : void
		+begin(const String& hwSettingsName, unsigned long waitingTimeMs) : void
		+end() : void
	}

	class FrameDecoder {
		#FrameDecoder(const BusSettings& bus, const std::map<int, LedSettings>& leds)
		#FrameDecoder()
		+~FrameDecoder()
		#m_busSettings : BusSettings
		+busSettings() : BusSettings& {query}
		-{static} clkRisingInterrupt() : IRAM_ATTR void
		-{static} holdRisingInterrupt() : IRAM_ATTR void
		+hasLed(int key) : bool {query}
		+isOpen() : bool {query}
		+isSetupModeTriggered() : bool {query}
		-m_isopened : bool
		#{static} ResetErrorFrameCounter : static const uint32_t
		#{static} SetupTrigUnitChangeFrameCounterMax : static const uint32_t
		#{static} FramePeriodUs : static const unsigned long
		#{static} m_dataPin : static int
		#{static} m_frameLedBubble : static uint16_t
		#{static} m_frameLedFilter : static uint16_t
		#{static} m_frameLedHeater : static uint16_t
		#{static} m_frameLedHeaterReached : static uint16_t
		#{static} m_frameLedJet : static uint16_t
		#{static} m_frameLedPower : static uint16_t
		#{static} m_frameLedSanitizer : static uint16_t
		#{static} m_isDisplayBlink : static volatile bool
		#{static} m_counterTempUnitChanged : static volatile uint16_t
		#{static} m_desiredTemp : static volatile uint16_t
		#{static} m_displayValue : static volatile uint16_t
		#{static} m_errorValue : static volatile uint16_t
		#{static} m_frameShift : static volatile uint16_t
		#{static} m_frameValue : static volatile uint16_t
		#{static} m_latestDesiredTemp : static volatile uint16_t
		#{static} m_latestDisplayValue : static volatile uint16_t
		#{static} m_latestLedStatus : static volatile uint16_t
		#{static} m_latestWaterTemp : static volatile uint16_t
		#{static} m_rawStatus : static volatile uint16_t
		#{static} m_sanitizerTime : static volatile uint16_t
		#{static} m_stableDisplayValueCounter : static volatile uint16_t
		#{static} m_stableLedStatusCounter : static volatile uint16_t
		#{static} m_stableWaterTempCounter : static volatile uint16_t
		#{static} m_unsetDigits : static volatile uint16_t
		#{static} m_waterTemp : static volatile uint16_t
		#{static} m_frameCounter : static volatile uint32_t
		#{static} m_frameDropped : static volatile uint32_t
		#{static} m_lastBlackDisplayFrameCounter : static volatile uint32_t
		#{static} m_lastErrorChangeFrameCounter : static volatile uint32_t
		#{static} m_lastSanitizerFrameCounter : static volatile uint32_t
		#{static} m_lastTempUnitChangeFrameCounter : static volatile uint32_t
		#{static} m_lastTempUnit : static volatile uint8_t
		+ledSettings() : std::map<int , LedSettings> {query}
		#m_ledSettings : std::map<int, LedSettings>
		#{static} convertDisplayToCelsius(uint16_t m_displayValue) : uint16_t
		+desiredTemp() : uint16_t {query}
		+error() : uint16_t
		+rawStatus() : uint16_t {query}
		+sanitizerTime() : uint16_t {query}
		+waitForWaterTemp(unsigned long MaxWaitingTimeMs) : uint16_t {query}
		+waterTemp() : uint16_t {query}
		+frameCounter() : uint32_t {query}
		+frameDropped() : uint32_t {query}
		+isBubbleOn() : uint8_t {query}
		+isDisplayBlink() : uint8_t {query}
		+isFilterOn() : uint8_t {query}
		+isHeatReached() : uint8_t {query}
		+isHeaterOn() : uint8_t {query}
		+isJetOn() : uint8_t {query}
		+isLedOn(int key) : uint8_t {query}
		+isPowerOn() : uint8_t {query}
		+isSanitizerOn() : uint8_t {query}
		+waitUntilDisplayBlink(unsigned long MaxWaitingTimeMs) : uint8_t {query}
		+begin(unsigned long waitingTimeMs) : void
		+begin(const BusSettings& settings, const std::map<int, LedSettings>& leds, unsigned long waitingTimeMs) : void
		+end() : void
	}

	class HardwareSettings {
		+HardwareSettings()
		+HardwareSettings(const BusSettings& bus, const std::map<int, LedSettings>& leds, const std::map<int, ButtonSettings>& buttons)
		+bus() : BusSettings& {query}
		+{static} getFromRegister(const String& name) : HardwareSettings&
		+{static} addToRegister(const String& name, const HardwareSettings& settings) : bool
		+isNull() : bool {query}
		+operator!=(const HardwareSettings& other) : bool {query}
		+operator==(const HardwareSettings& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		-m_bus : const BusSettings*
		-m_buttons : const std::map<int, ButtonSettings>*
		-m_leds : const std::map<int, LedSettings>*
		-{static} Register : static std::map<String, const HardwareSettings*>
		+buttons() : std::map<int , ButtonSettings>& {query}
		+leds() : std::map<int , LedSettings>& {query}
		+print(Print& out) : void {query}
	}

	class LedSettings {
		+LedSettings()
		+LedSettings(const uint8_t order)
		+isNull() : bool {query}
		+operator!=(const LedSettings& other) : bool {query}
		+operator==(const LedSettings& other) : bool {query}
		+frame() : uint16_t {query}
		-m_order : uint8_t
		+order() : uint8_t {query}
		+setOrder(const uint8_t order) : void
	}

	class Multiplexer <template<int W>> {
		+Multiplexer(const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer(const String& name, const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer()
		+isNull() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		#m_inh : int
		+select(int button) : int
		+selectPin(int key) : int {query}
		+size() : int {query}
		#m_spin : std::vector<int>
		+begin() : void
		+deselect() : void
		+end() : void
		+setSelectPin(int key, int pin) : void
	}

	class Pcf8574Mux {
		+Pcf8574Mux(uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		+Pcf8574Mux(const String& name, uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		#m_pcf : TwoWireSlave
		+isNull() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+select(int button) : int
		+address() : uint8_t {query}
		#m_idle : uint8_t
		+begin() : void
		+deselect() : void
		+end() : void
	}

	class TwoWireSlave {
		+TwoWireSlave(uint8_t slaveAddress, TwoWire& bus)
		+bus() : TwoWire& {query}
		-m_bus : TwoWire&
		+read() : int
		+read(uint8_t* values, uint16_t len) : int
		+read(uint8_t dataAddress) : int
		+read(uint8_t dataAddress, uint8_t* values, uint16_t len) : int
		+write(uint8_t value) : int
		+write(const uint8_t* values, uint16_t len) : int
		+write(uint8_t dataAddress, uint8_t value) : int
		+write(uint8_t dataAddress, const uint8_t* values, uint16_t len) : int
		+address() : uint8_t {query}
		-m_address : uint8_t
		+setAddress(uint8_t slaveAddress) : void
	}

	enum Key {
		Bubble
		Filter
		HeatReached
		Heater
		Jet
		Power
		Sanitizer
		TempDown
		TempUnit
		TempUp
	}
}






SpaIot.ButtonController <|- - SpaIot.Multiplexer


SpaIot.ButtonController <|- - SpaIot.Pcf8574Mux


SpaIot.FrameDecoder <|- - SpaIot.ControlPanel


SpaIot.Multiplexer <|- - SpaIot.Cd4051






SpaIot.Button *- - SpaIot.ButtonSettings


SpaIot.ButtonController *- - SpaIot.ButtonController


SpaIot.ButtonSettings o- - SpaIot.ButtonController


SpaIot.ControlPanel *- - SpaIot.Button


SpaIot.ControlPanel *- - SpaIot.ButtonSettings


SpaIot.ControlPanel o- - SpaIot.ControlPanel


SpaIot.FrameDecoder *- - SpaIot.BusSettings


SpaIot.FrameDecoder *- - SpaIot.LedSettings


SpaIot.HardwareSettings o- - SpaIot.BusSettings


SpaIot.HardwareSettings *- - SpaIot.ButtonSettings


SpaIot.HardwareSettings o- - SpaIot.HardwareSettings


SpaIot.HardwareSettings *- - SpaIot.LedSettings


SpaIot.Pcf8574Mux *- - SpaIot.TwoWireSlave









@enduml

PlantUML version 1.2022.7(Mon Aug 22 19:01:30 CEST 2022)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: Cp1252
Language: fr
Country: FR
--></g></svg>