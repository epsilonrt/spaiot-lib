<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1879px" preserveAspectRatio="none" style="width:3636px;height:1879px;background:#FFFFFF;" version="1.1" viewBox="0 0 3636 1879" width="3636px" zoomAndPan="magnify"><defs/><g><!--MD5=[68dcf2e455a7ca0680c153ca8d70d4b0]
cluster SpaIot--><g id="cluster_SpaIot"><path d="M8.5,6 L53.5,6 A3.75,3.75 0 0 1 56,8.5 L63,29.6094 L3626.5,29.6094 A2.5,2.5 0 0 1 3629,32.1094 L3629,1869.5 A2.5,2.5 0 0 1 3626.5,1872 L8.5,1872 A2.5,2.5 0 0 1 6,1869.5 L6,8.5 A2.5,2.5 0 0 1 8.5,6 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="63" y1="29.6094" y2="29.6094"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="44" x="10" y="22.5332">SpaIot</text></g><!--MD5=[7e27d3ca6559110cbc0915d401b32d25]
class SpaIot.BusSettings--><g id="elem_SpaIot.BusSettings"><rect codeLine="9" fill="#F1F1F1" height="417.7969" id="SpaIot.BusSettings" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="430" x="2152" y="147.5"/><ellipse cx="2325.25" cy="163.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2328.0156,159.375 Q2328.1719,159.1563 2328.3594,159.0469 Q2328.5469,158.9375 2328.7656,158.9375 Q2329.1406,158.9375 2329.375,159.1953 Q2329.6094,159.4531 2329.6094,160.0625 L2329.6094,161.5156 Q2329.6094,162.125 2329.375,162.3906 Q2329.1406,162.6563 2328.7656,162.6563 Q2328.4219,162.6563 2328.2188,162.4531 Q2328.0156,162.2656 2327.9063,161.75 Q2327.8594,161.3906 2327.6719,161.2031 Q2327.3438,160.8281 2326.7344,160.6094 Q2326.125,160.3906 2325.5,160.3906 Q2324.7344,160.3906 2324.1016,160.7188 Q2323.4688,161.0469 2322.9766,161.7969 Q2322.4844,162.5469 2322.4844,163.5781 L2322.4844,164.6719 Q2322.4844,165.9063 2323.375,166.7266 Q2324.2656,167.5469 2325.8594,167.5469 Q2326.7969,167.5469 2327.4531,167.2969 Q2327.8438,167.1406 2328.2656,166.7031 Q2328.5313,166.4375 2328.6797,166.3594 Q2328.8281,166.2813 2329.0313,166.2813 Q2329.3594,166.2813 2329.6172,166.5391 Q2329.875,166.7969 2329.875,167.1406 Q2329.875,167.4844 2329.5313,167.8906 Q2329.0313,168.4688 2328.2344,168.7969 Q2327.1563,169.25 2325.8594,169.25 Q2324.3438,169.25 2323.1406,168.625 Q2322.1563,168.125 2321.4688,167.0547 Q2320.7813,165.9844 2320.7813,164.7031 L2320.7813,163.5469 Q2320.7813,162.2188 2321.3984,161.0703 Q2322.0156,159.9219 2323.1094,159.3047 Q2324.2031,158.6875 2325.4375,158.6875 Q2326.1719,158.6875 2326.8203,158.8516 Q2327.4688,159.0156 2328.0156,159.375 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="2345.75" y="169.2285">BusSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="2153" x2="2581" y1="179.5" y2="179.5"/><polygon fill="none" points="2163,188.8047,2167,192.8047,2163,196.8047,2159,192.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="2172" y="198.0332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2153" x2="2581" y1="205.1094" y2="205.1094"/><ellipse cx="2163" cy="219.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="2172" y="223.6426">BusSettings()</text><ellipse cx="2163" cy="237.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="404" x="2172" y="241.252">BusSettings(const int dataPin, const int clkPin, const int holdPin)</text><ellipse cx="2163" cy="254.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="299" x="2172" y="258.8613">BusSettings(const std::initializer_list&lt;int&gt;&amp; pins)</text><ellipse cx="2163" cy="272.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="2172" y="276.4707">BusSettings(const BusSettings&amp; other)</text><ellipse cx="2163" cy="289.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="2172" y="294.0801">BusSettings(BusSettings&amp;&amp; other)</text><polygon fill="#FFFF44" points="2163,302.4609,2167,306.4609,2163,310.4609,2159,306.4609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="2172" y="311.6895">BusSettings(Private&amp; dd)</text><ellipse cx="2163" cy="325.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="2172" y="329.2988">~BusSettings()</text><ellipse cx="2163" cy="342.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="327" x="2172" y="346.9082">operator=(const BusSettings&amp; other) : BusSettings&amp;</text><ellipse cx="2163" cy="360.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="298" x="2172" y="364.5176">operator=(BusSettings&amp;&amp; other) : BusSettings&amp;</text><ellipse cx="2163" cy="377.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="2172" y="382.127">isEmpty() : bool {query}</text><ellipse cx="2163" cy="395.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2172" y="399.7363">isNull() : bool {query}</text><ellipse cx="2163" cy="413.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="2172" y="417.3457">operator!=(const BusSettings&amp; other) : bool {query}</text><ellipse cx="2163" cy="430.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="2172" y="434.9551">operator==(const BusSettings&amp; other) : bool {query}</text><ellipse cx="2163" cy="448.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="2172" y="452.5645">clkPin() : int {query}</text><ellipse cx="2163" cy="465.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="2172" y="470.1738">dataPin() : int {query}</text><ellipse cx="2163" cy="483.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="2172" y="487.7832">holdPin() : int {query}</text><ellipse cx="2163" cy="501.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="2172" y="505.3926">clear() : void</text><ellipse cx="2163" cy="518.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="2172" y="523.002">setClkPin(int pin) : void</text><ellipse cx="2163" cy="536.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="2172" y="540.6113">setDataPin(int pin) : void</text><ellipse cx="2163" cy="553.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="2172" y="558.2207">setHoldPin(int pin) : void</text></g><!--MD5=[4e9867af593e3e1629e3b6b82b617456]
class SpaIot.Button--><g id="elem_SpaIot.Button"><rect codeLine="33" fill="#F1F1F1" height="470.625" id="SpaIot.Button" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="320" x="2617" y="121"/><ellipse cx="2752.25" cy="137" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2755.0156,132.875 Q2755.1719,132.6563 2755.3594,132.5469 Q2755.5469,132.4375 2755.7656,132.4375 Q2756.1406,132.4375 2756.375,132.6953 Q2756.6094,132.9531 2756.6094,133.5625 L2756.6094,135.0156 Q2756.6094,135.625 2756.375,135.8906 Q2756.1406,136.1563 2755.7656,136.1563 Q2755.4219,136.1563 2755.2188,135.9531 Q2755.0156,135.7656 2754.9063,135.25 Q2754.8594,134.8906 2754.6719,134.7031 Q2754.3438,134.3281 2753.7344,134.1094 Q2753.125,133.8906 2752.5,133.8906 Q2751.7344,133.8906 2751.1016,134.2188 Q2750.4688,134.5469 2749.9766,135.2969 Q2749.4844,136.0469 2749.4844,137.0781 L2749.4844,138.1719 Q2749.4844,139.4063 2750.375,140.2266 Q2751.2656,141.0469 2752.8594,141.0469 Q2753.7969,141.0469 2754.4531,140.7969 Q2754.8438,140.6406 2755.2656,140.2031 Q2755.5313,139.9375 2755.6797,139.8594 Q2755.8281,139.7813 2756.0313,139.7813 Q2756.3594,139.7813 2756.6172,140.0391 Q2756.875,140.2969 2756.875,140.6406 Q2756.875,140.9844 2756.5313,141.3906 Q2756.0313,141.9688 2755.2344,142.2969 Q2754.1563,142.75 2752.8594,142.75 Q2751.3438,142.75 2750.1406,142.125 Q2749.1563,141.625 2748.4688,140.5547 Q2747.7813,139.4844 2747.7813,138.2031 L2747.7813,137.0469 Q2747.7813,135.7188 2748.3984,134.5703 Q2749.0156,133.4219 2750.1094,132.8047 Q2751.2031,132.1875 2752.4375,132.1875 Q2753.1719,132.1875 2753.8203,132.3516 Q2754.4688,132.5156 2755.0156,132.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="41" x="2772.75" y="142.7285">Button</text><line style="stroke:#181818;stroke-width:0.5;" x1="2618" x2="2936" y1="153" y2="153"/><polygon fill="none" points="2628,162.3047,2632,166.3047,2628,170.3047,2624,166.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="2637" y="171.5332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2618" x2="2936" y1="178.6094" y2="178.6094"/><ellipse cx="2628" cy="192.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="2637" y="197.1426">Button()</text><ellipse cx="2628" cy="210.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="2637" y="214.752">Button(const ButtonSettings&amp; settings)</text><ellipse cx="2628" cy="228.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="2637" y="232.3613">Button(const Button&amp; other)</text><ellipse cx="2628" cy="245.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="2637" y="249.9707">Button(Button&amp;&amp; other)</text><polygon fill="#FFFF44" points="2628,258.3516,2632,262.3516,2628,266.3516,2624,262.3516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="2637" y="267.5801">Button(Private&amp; dd)</text><ellipse cx="2628" cy="280.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="2637" y="285.1895">~Button()</text><ellipse cx="2628" cy="298.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="259" x="2637" y="302.7988">operator=(const Button&amp; other) : Button&amp;</text><ellipse cx="2628" cy="316.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="2637" y="320.4082">operator=(Button&amp;&amp; other) : Button&amp;</text><ellipse cx="2628" cy="333.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="2637" y="338.0176">ctrl() : ButtonController&amp; {query}</text><ellipse cx="2628" cy="351.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="2637" y="355.627">ctrl() : ButtonController&amp;</text><ellipse cx="2628" cy="369.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="222" x="2637" y="373.2363">settings() : ButtonSettings&amp; {query}</text><ellipse cx="2628" cy="386.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="2637" y="390.8457">isEmpty() : bool {query}</text><ellipse cx="2628" cy="404.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2637" y="408.4551">isNull() : bool {query}</text><ellipse cx="2628" cy="421.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="2637" y="426.0645">isOpen() : bool {query}</text><ellipse cx="2628" cy="439.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="2637" y="443.6738">isPressed() : bool {query}</text><ellipse cx="2628" cy="457.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="291" x="2637" y="461.2832">operator!=(const Button&amp; other) : bool {query}</text><ellipse cx="2628" cy="474.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="2637" y="478.8926">operator==(const Button&amp; other) : bool {query}</text><ellipse cx="2628" cy="492.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="2637" y="496.502">id() : int {query}</text><ellipse cx="2628" cy="509.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="2637" y="514.1113">begin() : void</text><ellipse cx="2628" cy="527.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="2637" y="531.7207">clear() : void</text><ellipse cx="2628" cy="545.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="2637" y="549.3301">press() : void</text><ellipse cx="2628" cy="562.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="2637" y="566.9395">push() : void</text><ellipse cx="2628" cy="580.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="2637" y="584.5488">release() : void</text></g><!--MD5=[ceb2c8e8a5a42aa74c4007e66357763f]
class SpaIot.ButtonController--><g id="elem_SpaIot.ButtonController"><rect codeLine="60" fill="#F1F1F1" height="453.0156" id="SpaIot.ButtonController" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="475" x="1259.5" y="130"/><ellipse cx="1441.25" cy="146" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1443.4375,147.7656 L1439.2969,147.7656 L1438.875,148.7969 L1439.2969,148.7969 Q1439.9063,148.7969 1440.1719,149.0313 Q1440.4375,149.2656 1440.4375,149.6563 Q1440.4375,150.0313 1440.1719,150.2656 Q1439.9063,150.5 1439.2969,150.5 L1437,150.5 Q1436.3906,150.5 1436.1328,150.2656 Q1435.875,150.0313 1435.875,149.6406 Q1435.875,149.2656 1436.1484,149.0234 Q1436.4219,148.7813 1437.0469,148.7969 L1439.7188,142.1406 L1438.6094,142.1406 Q1438,142.1406 1437.7344,141.9063 Q1437.4688,141.6719 1437.4688,141.2813 Q1437.4688,140.9063 1437.7344,140.6719 Q1438,140.4375 1438.6094,140.4375 L1442.2813,140.4375 L1445.6719,148.7969 Q1446.2656,148.7969 1446.4531,148.9375 Q1446.8438,149.2031 1446.8438,149.6563 Q1446.8438,150.0313 1446.5859,150.2656 Q1446.3281,150.5 1445.7188,150.5 L1443.4219,150.5 Q1442.8125,150.5 1442.5469,150.2656 Q1442.2813,150.0313 1442.2813,149.6406 Q1442.2813,149.2656 1442.5469,149.0313 Q1442.8125,148.7969 1443.4219,148.7969 L1443.8438,148.7969 L1443.4375,147.7656 Z M1442.7188,146.0625 L1441.3594,142.6875 L1439.9844,146.0625 L1442.7188,146.0625 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="103" x="1461.75" y="151.7285">ButtonController</text><line style="stroke:#181818;stroke-width:0.5;" x1="1260.5" x2="1733.5" y1="162" y2="162"/><polygon fill="none" points="1270.5,171.3047,1274.5,175.3047,1270.5,179.3047,1266.5,175.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="1279.5" y="180.5332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1260.5" x2="1733.5" y1="187.6094" y2="187.6094"/><ellipse cx="1270.5" cy="201.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="1279.5" y="206.1426">ButtonController(const ButtonController&amp; other)</text><ellipse cx="1270.5" cy="219.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="271" x="1279.5" y="223.752">ButtonController(ButtonController&amp;&amp; other)</text><polygon fill="#FFFF44" points="1270.5,232.1328,1274.5,236.1328,1270.5,240.1328,1266.5,236.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="1279.5" y="241.3613">ButtonController(Private&amp; dd)</text><ellipse cx="1270.5" cy="254.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="1279.5" y="258.9707">~ButtonController()</text><ellipse cx="1270.5" cy="272.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="363" x="1279.5" y="276.5801">getFromRegister(const String&amp; name) : ButtonController&amp;</text><ellipse cx="1270.5" cy="289.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="383" x="1279.5" y="294.1895">operator=(const ButtonController&amp; other) : ButtonController&amp;</text><ellipse cx="1270.5" cy="307.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="1279.5" y="311.7988">operator=(ButtonController&amp;&amp; other) : ButtonController&amp;</text><ellipse cx="1270.5" cy="325.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="1279.5" y="329.4082">name() : String&amp; {query}</text><ellipse cx="1270.5" cy="342.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="449" x="1279.5" y="347.0176">addToRegister(const String&amp; name, ButtonController&amp; controller) : bool</text><ellipse cx="1270.5" cy="360.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="1279.5" y="364.627">isEmpty() : bool {query}</text><ellipse cx="1270.5" cy="378.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1279.5" y="382.2363">isNull() : bool {query}</text><ellipse cx="1270.5" cy="395.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="1279.5" y="399.8457">isOpen() : bool {query}</text><ellipse cx="1270.5" cy="413.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="1279.5" y="417.4551">isSelected() : bool {query}</text><ellipse cx="1270.5" cy="430.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353" x="1279.5" y="435.0645">operator!=(const ButtonController&amp; other) : bool {query}</text><ellipse cx="1270.5" cy="448.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="1279.5" y="452.6738">operator==(const ButtonController&amp; other) : bool {query}</text><ellipse cx="1270.5" cy="466.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="1279.5" y="470.2832">registerContains(const String&amp; name) : bool</text><ellipse cx="1270.5" cy="483.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="133" x="1279.5" y="487.8926">select(int button) : int</text><ellipse cx="1270.5" cy="501.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="1279.5" y="505.502">selected() : int {query}</text><ellipse cx="1270.5" cy="518.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="1279.5" y="523.1113">begin() : void</text><ellipse cx="1270.5" cy="536.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="1279.5" y="540.7207">clear() : void</text><ellipse cx="1270.5" cy="554.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="100" x="1279.5" y="558.3301">deselect() : void</text><ellipse cx="1270.5" cy="571.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="1279.5" y="575.9395">end() : void</text></g><!--MD5=[f3661e4561688efb30fa75bc4c31bf8e]
class SpaIot.ButtonSettings--><g id="elem_SpaIot.ButtonSettings"><rect codeLine="86" fill="#F1F1F1" height="400.1875" id="SpaIot.ButtonSettings" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="389" x="2972.5" y="156.5"/><ellipse cx="3116.75" cy="172.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3119.5156,168.375 Q3119.6719,168.1563 3119.8594,168.0469 Q3120.0469,167.9375 3120.2656,167.9375 Q3120.6406,167.9375 3120.875,168.1953 Q3121.1094,168.4531 3121.1094,169.0625 L3121.1094,170.5156 Q3121.1094,171.125 3120.875,171.3906 Q3120.6406,171.6563 3120.2656,171.6563 Q3119.9219,171.6563 3119.7188,171.4531 Q3119.5156,171.2656 3119.4063,170.75 Q3119.3594,170.3906 3119.1719,170.2031 Q3118.8438,169.8281 3118.2344,169.6094 Q3117.625,169.3906 3117,169.3906 Q3116.2344,169.3906 3115.6016,169.7188 Q3114.9688,170.0469 3114.4766,170.7969 Q3113.9844,171.5469 3113.9844,172.5781 L3113.9844,173.6719 Q3113.9844,174.9063 3114.875,175.7266 Q3115.7656,176.5469 3117.3594,176.5469 Q3118.2969,176.5469 3118.9531,176.2969 Q3119.3438,176.1406 3119.7656,175.7031 Q3120.0313,175.4375 3120.1797,175.3594 Q3120.3281,175.2813 3120.5313,175.2813 Q3120.8594,175.2813 3121.1172,175.5391 Q3121.375,175.7969 3121.375,176.1406 Q3121.375,176.4844 3121.0313,176.8906 Q3120.5313,177.4688 3119.7344,177.7969 Q3118.6563,178.25 3117.3594,178.25 Q3115.8438,178.25 3114.6406,177.625 Q3113.6563,177.125 3112.9688,176.0547 Q3112.2813,174.9844 3112.2813,173.7031 L3112.2813,172.5469 Q3112.2813,171.2188 3112.8984,170.0703 Q3113.5156,168.9219 3114.6094,168.3047 Q3115.7031,167.6875 3116.9375,167.6875 Q3117.6719,167.6875 3118.3203,167.8516 Q3118.9688,168.0156 3119.5156,168.375 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="3137.25" y="178.2285">ButtonSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="2973.5" x2="3360.5" y1="188.5" y2="188.5"/><polygon fill="none" points="2983.5,197.8047,2987.5,201.8047,2983.5,205.8047,2979.5,201.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="2992.5" y="207.0332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2973.5" x2="3360.5" y1="214.1094" y2="214.1094"/><ellipse cx="2983.5" cy="228.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="2992.5" y="232.6426">ButtonSettings()</text><ellipse cx="2983.5" cy="246.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="2992.5" y="250.252">ButtonSettings(const String&amp; controllerName, int buttonId)</text><ellipse cx="2983.5" cy="263.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="355" x="2992.5" y="267.8613">ButtonSettings(ButtonController&amp; controller, int buttonId)</text><ellipse cx="2983.5" cy="281.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="278" x="2992.5" y="285.4707">ButtonSettings(const ButtonSettings&amp; other)</text><ellipse cx="2983.5" cy="298.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="2992.5" y="303.0801">ButtonSettings(ButtonSettings&amp;&amp; other)</text><polygon fill="#FFFF44" points="2983.5,311.4609,2987.5,315.4609,2983.5,319.4609,2979.5,315.4609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="2992.5" y="320.6895">ButtonSettings(Private&amp; dd)</text><ellipse cx="2983.5" cy="334.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="2992.5" y="338.2988">~ButtonSettings()</text><ellipse cx="2983.5" cy="351.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="2992.5" y="355.9082">ctrl() : ButtonController&amp; {query}</text><ellipse cx="2983.5" cy="369.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="2992.5" y="373.5176">ctrl() : ButtonController&amp;</text><ellipse cx="2983.5" cy="386.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="361" x="2992.5" y="391.127">operator=(const ButtonSettings&amp; other) : ButtonSettings&amp;</text><ellipse cx="2983.5" cy="404.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="2992.5" y="408.7363">operator=(ButtonSettings&amp;&amp; other) : ButtonSettings&amp;</text><ellipse cx="2983.5" cy="422.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="2992.5" y="426.3457">controllerName() : String&amp; {query}</text><ellipse cx="2983.5" cy="439.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="2992.5" y="443.9551">isEmpty() : bool {query}</text><ellipse cx="2983.5" cy="457.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2992.5" y="461.5645">isNull() : bool {query}</text><ellipse cx="2983.5" cy="474.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="342" x="2992.5" y="479.1738">operator!=(const ButtonSettings&amp; other) : bool {query}</text><ellipse cx="2983.5" cy="492.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="345" x="2992.5" y="496.7832">operator==(const ButtonSettings&amp; other) : bool {query}</text><ellipse cx="2983.5" cy="510.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="2992.5" y="514.3926">id() : int {query}</text><ellipse cx="2983.5" cy="527.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="2992.5" y="532.002">clear() : void</text><ellipse cx="2983.5" cy="545.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="2992.5" y="549.6113">setId(int id) : void</text></g><!--MD5=[9a0b46f1f7d8701560c15ba08c471702]
class SpaIot.ControlPanel--><g id="elem_SpaIot.ControlPanel"><rect codeLine="109" fill="#F1F1F1" height="417.7969" id="SpaIot.ControlPanel" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="530" x="22" y="731"/><ellipse cx="241.75" cy="747" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M244.5156,742.875 Q244.6719,742.6563 244.8594,742.5469 Q245.0469,742.4375 245.2656,742.4375 Q245.6406,742.4375 245.875,742.6953 Q246.1094,742.9531 246.1094,743.5625 L246.1094,745.0156 Q246.1094,745.625 245.875,745.8906 Q245.6406,746.1563 245.2656,746.1563 Q244.9219,746.1563 244.7188,745.9531 Q244.5156,745.7656 244.4063,745.25 Q244.3594,744.8906 244.1719,744.7031 Q243.8438,744.3281 243.2344,744.1094 Q242.625,743.8906 242,743.8906 Q241.2344,743.8906 240.6016,744.2188 Q239.9688,744.5469 239.4766,745.2969 Q238.9844,746.0469 238.9844,747.0781 L238.9844,748.1719 Q238.9844,749.4063 239.875,750.2266 Q240.7656,751.0469 242.3594,751.0469 Q243.2969,751.0469 243.9531,750.7969 Q244.3438,750.6406 244.7656,750.2031 Q245.0313,749.9375 245.1797,749.8594 Q245.3281,749.7813 245.5313,749.7813 Q245.8594,749.7813 246.1172,750.0391 Q246.375,750.2969 246.375,750.6406 Q246.375,750.9844 246.0313,751.3906 Q245.5313,751.9688 244.7344,752.2969 Q243.6563,752.75 242.3594,752.75 Q240.8438,752.75 239.6406,752.125 Q238.6563,751.625 237.9688,750.5547 Q237.2813,749.4844 237.2813,748.2031 L237.2813,747.0469 Q237.2813,745.7188 237.8984,744.5703 Q238.5156,743.4219 239.6094,742.8047 Q240.7031,742.1875 241.9375,742.1875 Q242.6719,742.1875 243.3203,742.3516 Q243.9688,742.5156 244.5156,742.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="262.25" y="752.7285">ControlPanel</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="551" y1="763" y2="763"/><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="551" y1="771" y2="771"/><ellipse cx="33" cy="785.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="42" y="789.5332">ControlPanel()</text><ellipse cx="33" cy="802.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="320" x="42" y="807.1426">ControlPanel(const HardwareSettings&amp; hwsettings)</text><ellipse cx="33" cy="820.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="42" y="824.752">ControlPanel(const String&amp; hwSettingsName)</text><polygon fill="#FFFF44" points="33,833.1328,37,837.1328,33,841.1328,29,837.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="42" y="842.3613">ControlPanel(Private&amp; dd)</text><ellipse cx="33" cy="855.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="42" y="859.9707">button(int key) : Button&amp;</text><ellipse cx="33" cy="873.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="42" y="877.5801">hasButton(int key) : bool {query}</text><ellipse cx="33" cy="890.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="42" y="895.1895">isOpen() : bool {query}</text><ellipse cx="33" cy="908.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="42" y="912.7988">pushButton(int key) : bool</text><ellipse cx="33" cy="926.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="42" y="930.4082">setDesiredTemp(uint16_t temp) : bool</text><ellipse cx="33" cy="943.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="42" y="948.0176">setSanitizerTime(uint16_t time) : bool</text><ellipse cx="33" cy="961.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352" x="42" y="965.627">buttonSettings() : std::map&lt;int , ButtonSettings&gt; {query}</text><ellipse cx="33" cy="979.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="418" x="42" y="983.2363">waitForDesiredTemp(unsigned long MaxWaitingTimeMs) : uint16_t</text><ellipse cx="33" cy="996.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="42" y="1000.8457">setBubble(bool v) : uint8_t</text><ellipse cx="33" cy="1014.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="42" y="1018.4551">setFilter(bool v) : uint8_t</text><ellipse cx="33" cy="1031.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="42" y="1036.0645">setHeater(bool v) : uint8_t</text><ellipse cx="33" cy="1049.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="42" y="1053.6738">setJet(bool v) : uint8_t</text><ellipse cx="33" cy="1067.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="42" y="1071.2832">setPower(bool v) : uint8_t</text><ellipse cx="33" cy="1084.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="42" y="1088.8926">begin(unsigned long waitingTimeMs) : void</text><ellipse cx="33" cy="1102.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="504" x="42" y="1106.502">begin(const HardwareSettings&amp; hwsettings, unsigned long waitingTimeMs) : void</text><ellipse cx="33" cy="1119.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="468" x="42" y="1124.1113">begin(const String&amp; hwSettingsName, unsigned long waitingTimeMs) : void</text><ellipse cx="33" cy="1137.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="42" y="1141.7207">end() : void</text></g><!--MD5=[6efc9af41705ca6a8da9438eab503521]
class SpaIot.Event--><g id="elem_SpaIot.Event"><rect codeLine="133" fill="#F1F1F1" height="453.0156" id="SpaIot.Event" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="315" x="787.5" y="130"/><ellipse cx="922.75" cy="146" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M925.5156,141.875 Q925.6719,141.6563 925.8594,141.5469 Q926.0469,141.4375 926.2656,141.4375 Q926.6406,141.4375 926.875,141.6953 Q927.1094,141.9531 927.1094,142.5625 L927.1094,144.0156 Q927.1094,144.625 926.875,144.8906 Q926.6406,145.1563 926.2656,145.1563 Q925.9219,145.1563 925.7188,144.9531 Q925.5156,144.7656 925.4063,144.25 Q925.3594,143.8906 925.1719,143.7031 Q924.8438,143.3281 924.2344,143.1094 Q923.625,142.8906 923,142.8906 Q922.2344,142.8906 921.6016,143.2188 Q920.9688,143.5469 920.4766,144.2969 Q919.9844,145.0469 919.9844,146.0781 L919.9844,147.1719 Q919.9844,148.4063 920.875,149.2266 Q921.7656,150.0469 923.3594,150.0469 Q924.2969,150.0469 924.9531,149.7969 Q925.3438,149.6406 925.7656,149.2031 Q926.0313,148.9375 926.1797,148.8594 Q926.3281,148.7813 926.5313,148.7813 Q926.8594,148.7813 927.1172,149.0391 Q927.375,149.2969 927.375,149.6406 Q927.375,149.9844 927.0313,150.3906 Q926.5313,150.9688 925.7344,151.2969 Q924.6563,151.75 923.3594,151.75 Q921.8438,151.75 920.6406,151.125 Q919.6563,150.625 918.9688,149.5547 Q918.2813,148.4844 918.2813,147.2031 L918.2813,146.0469 Q918.2813,144.7188 918.8984,143.5703 Q919.5156,142.4219 920.6094,141.8047 Q921.7031,141.1875 922.9375,141.1875 Q923.6719,141.1875 924.3203,141.3516 Q924.9688,141.5156 925.5156,141.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="36" x="943.25" y="151.7285">Event</text><line style="stroke:#181818;stroke-width:0.5;" x1="788.5" x2="1101.5" y1="162" y2="162"/><polygon fill="none" points="798.5,171.3047,802.5,175.3047,798.5,179.3047,794.5,175.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="807.5" y="180.5332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="788.5" x2="1101.5" y1="187.6094" y2="187.6094"/><ellipse cx="798.5" cy="201.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="807.5" y="206.1426">Event(Type type, uint16_t value)</text><ellipse cx="798.5" cy="219.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="807.5" y="223.752">Event(const Event&amp; other)</text><ellipse cx="798.5" cy="237.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="807.5" y="241.3613">Event(Event&amp;&amp; other)</text><polygon fill="#FFFF44" points="798.5,249.7422,802.5,253.7422,798.5,257.7422,794.5,253.7422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="807.5" y="258.9707">Event(Private&amp; dd)</text><ellipse cx="798.5" cy="272.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="141" x="807.5" y="276.5801">operatorbool() {query}</text><ellipse cx="798.5" cy="289.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="807.5" y="294.1895">operatoruint16_t() {query}</text><ellipse cx="798.5" cy="307.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="54" x="807.5" y="311.7988">~Event()</text><ellipse cx="798.5" cy="325.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="807.5" y="329.4082">operator=(const Event&amp; other) : Event&amp;</text><ellipse cx="798.5" cy="342.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="807.5" y="347.0176">operator=(Event&amp;&amp; other) : Event&amp;</text><ellipse cx="798.5" cy="360.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="807.5" y="364.627">toString() : String {query}</text><ellipse cx="798.5" cy="378.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="807.5" y="382.2363">typeToString(Type type) : String</text><ellipse cx="798.5" cy="395.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="206" x="807.5" y="399.8457">TypeIsBoolean(Type type) : bool</text><ellipse cx="798.5" cy="413.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="807.5" y="417.4551">isBoolean() : bool {query}</text><ellipse cx="798.5" cy="430.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="807.5" y="435.0645">isEmpty() : bool {query}</text><ellipse cx="798.5" cy="448.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="807.5" y="452.6738">isNull() : bool {query}</text><ellipse cx="798.5" cy="466.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="807.5" y="470.2832">operator!=(const Event&amp; other) : bool {query}</text><ellipse cx="798.5" cy="483.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="807.5" y="487.8926">operator==(const Event&amp; other) : bool {query}</text><ellipse cx="798.5" cy="501.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="807.5" y="505.502">type() : int {query}</text><ellipse cx="798.5" cy="518.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="807.5" y="523.1113">value() : uint16_t {query}</text><ellipse cx="798.5" cy="536.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="807.5" y="540.7207">clear() : void</text><ellipse cx="798.5" cy="554.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="807.5" y="558.3301">setType(Type type) : void</text><ellipse cx="798.5" cy="571.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="192" x="807.5" y="575.9395">setValue(uint16_t value) : void</text></g><!--MD5=[0c18072ef90c53b7935f9f1f11583239]
class SpaIot.FrameDecoder--><g id="elem_SpaIot.FrameDecoder"><rect codeLine="159" fill="#F1F1F1" height="629.1094" id="SpaIot.FrameDecoder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="730" x="22" y="42"/><ellipse cx="335.25" cy="58" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M338.0156,53.875 Q338.1719,53.6563 338.3594,53.5469 Q338.5469,53.4375 338.7656,53.4375 Q339.1406,53.4375 339.375,53.6953 Q339.6094,53.9531 339.6094,54.5625 L339.6094,56.0156 Q339.6094,56.625 339.375,56.8906 Q339.1406,57.1563 338.7656,57.1563 Q338.4219,57.1563 338.2188,56.9531 Q338.0156,56.7656 337.9063,56.25 Q337.8594,55.8906 337.6719,55.7031 Q337.3438,55.3281 336.7344,55.1094 Q336.125,54.8906 335.5,54.8906 Q334.7344,54.8906 334.1016,55.2188 Q333.4688,55.5469 332.9766,56.2969 Q332.4844,57.0469 332.4844,58.0781 L332.4844,59.1719 Q332.4844,60.4063 333.375,61.2266 Q334.2656,62.0469 335.8594,62.0469 Q336.7969,62.0469 337.4531,61.7969 Q337.8438,61.6406 338.2656,61.2031 Q338.5313,60.9375 338.6797,60.8594 Q338.8281,60.7813 339.0313,60.7813 Q339.3594,60.7813 339.6172,61.0391 Q339.875,61.2969 339.875,61.6406 Q339.875,61.9844 339.5313,62.3906 Q339.0313,62.9688 338.2344,63.2969 Q337.1563,63.75 335.8594,63.75 Q334.3438,63.75 333.1406,63.125 Q332.1563,62.625 331.4688,61.5547 Q330.7813,60.4844 330.7813,59.2031 L330.7813,58.0469 Q330.7813,56.7188 331.3984,55.5703 Q332.0156,54.4219 333.1094,53.8047 Q334.2031,53.1875 335.4375,53.1875 Q336.1719,53.1875 336.8203,53.3516 Q337.4688,53.5156 338.0156,53.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="355.75" y="63.7285">FrameDecoder</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="751" y1="74" y2="74"/><polygon fill="none" points="33,83.3047,37,87.3047,33,91.3047,29,87.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="42" y="92.5332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="23" x2="751" y1="99.6094" y2="99.6094"/><ellipse cx="33" cy="113.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="42" y="118.1426">FrameDecoder()</text><ellipse cx="33" cy="131.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="507" x="42" y="135.752">FrameDecoder(const BusSettings&amp; bus, const std::map&lt;int, LedSettings&gt;&amp; leds)</text><polygon fill="#FFFF44" points="33,144.1328,37,148.1328,33,152.1328,29,148.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178" x="42" y="153.3613">FrameDecoder(Private&amp; dd)</text><ellipse cx="33" cy="166.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="42" y="170.9707">~FrameDecoder()</text><ellipse cx="33" cy="184.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="42" y="188.5801">busSettings() : BusSettings&amp; {query}</text><ellipse cx="33" cy="201.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="42" y="206.1895">hasLed(int key) : bool {query}</text><ellipse cx="33" cy="219.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="42" y="223.7988">isOpen() : bool {query}</text><ellipse cx="33" cy="237.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="42" y="241.4082">isReady() : bool {query}</text><ellipse cx="33" cy="254.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="42" y="259.0176">isSetupModeTriggered() : bool {query}</text><ellipse cx="33" cy="272.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="42" y="276.627">ledSettings() : std::map&lt;int , LedSettings&gt; {query}</text><ellipse cx="33" cy="290.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="42" y="294.2363">desiredTemp() : uint16_t {query}</text><ellipse cx="33" cy="307.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="42" y="311.8457">error() : uint16_t {query}</text><ellipse cx="33" cy="325.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="42" y="329.4551">rawStatus() : uint16_t {query}</text><ellipse cx="33" cy="342.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="42" y="347.0645">sanitizerTime() : uint16_t {query}</text><ellipse cx="33" cy="360.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="457" x="42" y="364.6738">waitForWaterTemp(unsigned long MaxWaitingTimeMs) : uint16_t {query}</text><ellipse cx="33" cy="378.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="42" y="382.2832">waterTemp() : uint16_t {query}</text><ellipse cx="33" cy="395.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="42" y="399.8926">frameCounter() : uint32_t {query}</text><ellipse cx="33" cy="413.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="42" y="417.502">frameDropped() : uint32_t {query}</text><ellipse cx="33" cy="430.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="42" y="435.1113">isBubbleOn() : uint8_t {query}</text><ellipse cx="33" cy="448.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="42" y="452.7207">isDisplayBlink() : uint8_t {query}</text><ellipse cx="33" cy="466.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="42" y="470.3301">isFilterOn() : uint8_t {query}</text><ellipse cx="33" cy="483.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="42" y="487.9395">isHeatReached() : uint8_t {query}</text><ellipse cx="33" cy="501.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="42" y="505.5488">isHeaterOn() : uint8_t {query}</text><ellipse cx="33" cy="518.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="42" y="523.1582">isJetOn() : uint8_t {query}</text><ellipse cx="33" cy="536.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209" x="42" y="540.7676">isLedOn(int key) : uint8_t {query}</text><ellipse cx="33" cy="554.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="42" y="558.377">isPowerOn() : uint8_t {query}</text><ellipse cx="33" cy="571.7578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="42" y="575.9863">isSanitizerOn() : uint8_t {query}</text><ellipse cx="33" cy="589.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="456" x="42" y="593.5957">waitUntilDisplayBlink(unsigned long MaxWaitingTimeMs) : uint8_t {query}</text><ellipse cx="33" cy="606.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="42" y="611.2051">begin(unsigned long waitingTimeMs) : void</text><ellipse cx="33" cy="624.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="704" x="42" y="628.8145">begin(const BusSettings&amp; settings, const std::map&lt;int, LedSettings&gt;&amp; leds, unsigned long waitingTimeMs) : void</text><ellipse cx="33" cy="642.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="240" x="42" y="646.4238">clearTempUnitChangeCounter() : void</text><ellipse cx="33" cy="659.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="42" y="664.0332">end() : void</text></g><!--MD5=[01f0d4cc18d38a866d87c544a5caf86c]
class SpaIot.HardwareSettings--><g id="elem_SpaIot.HardwareSettings"><rect codeLine="195" fill="#F1F1F1" height="417.7969" id="SpaIot.HardwareSettings" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="840" x="1947" y="731"/><ellipse cx="2307.25" cy="747" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2310.0156,742.875 Q2310.1719,742.6563 2310.3594,742.5469 Q2310.5469,742.4375 2310.7656,742.4375 Q2311.1406,742.4375 2311.375,742.6953 Q2311.6094,742.9531 2311.6094,743.5625 L2311.6094,745.0156 Q2311.6094,745.625 2311.375,745.8906 Q2311.1406,746.1563 2310.7656,746.1563 Q2310.4219,746.1563 2310.2188,745.9531 Q2310.0156,745.7656 2309.9063,745.25 Q2309.8594,744.8906 2309.6719,744.7031 Q2309.3438,744.3281 2308.7344,744.1094 Q2308.125,743.8906 2307.5,743.8906 Q2306.7344,743.8906 2306.1016,744.2188 Q2305.4688,744.5469 2304.9766,745.2969 Q2304.4844,746.0469 2304.4844,747.0781 L2304.4844,748.1719 Q2304.4844,749.4063 2305.375,750.2266 Q2306.2656,751.0469 2307.8594,751.0469 Q2308.7969,751.0469 2309.4531,750.7969 Q2309.8438,750.6406 2310.2656,750.2031 Q2310.5313,749.9375 2310.6797,749.8594 Q2310.8281,749.7813 2311.0313,749.7813 Q2311.3594,749.7813 2311.6172,750.0391 Q2311.875,750.2969 2311.875,750.6406 Q2311.875,750.9844 2311.5313,751.3906 Q2311.0313,751.9688 2310.2344,752.2969 Q2309.1563,752.75 2307.8594,752.75 Q2306.3438,752.75 2305.1406,752.125 Q2304.1563,751.625 2303.4688,750.5547 Q2302.7813,749.4844 2302.7813,748.2031 L2302.7813,747.0469 Q2302.7813,745.7188 2303.3984,744.5703 Q2304.0156,743.4219 2305.1094,742.8047 Q2306.2031,742.1875 2307.4375,742.1875 Q2308.1719,742.1875 2308.8203,742.3516 Q2309.4688,742.5156 2310.0156,742.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="2327.75" y="752.7285">HardwareSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="1948" x2="2786" y1="763" y2="763"/><polygon fill="none" points="1958,772.3047,1962,776.3047,1958,780.3047,1954,776.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="1967" y="781.5332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1948" x2="2786" y1="788.6094" y2="788.6094"/><ellipse cx="1958" cy="802.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="1967" y="807.1426">HardwareSettings()</text><ellipse cx="1958" cy="820.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="814" x="1967" y="824.752">HardwareSettings(const BusSettings&amp; bus, const std::map&lt;int, LedSettings&gt;&amp; leds, const std::map&lt;int, ButtonSettings&gt;&amp; buttons)</text><ellipse cx="1958" cy="838.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="1967" y="842.3613">HardwareSettings(const HardwareSettings&amp; other)</text><ellipse cx="1958" cy="855.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="1967" y="859.9707">HardwareSettings(HardwareSettings&amp;&amp; other)</text><polygon fill="#FFFF44" points="1958,868.3516,1962,872.3516,1958,876.3516,1954,872.3516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="1967" y="877.5801">HardwareSettings(Private&amp; dd)</text><ellipse cx="1958" cy="890.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="1967" y="895.1895">~HardwareSettings()</text><ellipse cx="1958" cy="908.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="1967" y="912.7988">bus() : BusSettings&amp; {query}</text><ellipse cx="1958" cy="926.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="371" x="1967" y="930.4082">getFromRegister(const String&amp; name) : HardwareSettings&amp;</text><ellipse cx="1958" cy="943.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="399" x="1967" y="948.0176">operator=(const HardwareSettings&amp; other) : HardwareSettings&amp;</text><ellipse cx="1958" cy="961.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="370" x="1967" y="965.627">operator=(HardwareSettings&amp;&amp; other) : HardwareSettings&amp;</text><ellipse cx="1958" cy="979.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="485" x="1967" y="983.2363">addToRegister(const String&amp; name, const HardwareSettings&amp; settings) : bool</text><ellipse cx="1958" cy="996.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="1967" y="1000.8457">isEmpty() : bool {query}</text><ellipse cx="1958" cy="1014.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1967" y="1018.4551">isNull() : bool {query}</text><ellipse cx="1958" cy="1031.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="361" x="1967" y="1036.0645">operator!=(const HardwareSettings&amp; other) : bool {query}</text><ellipse cx="1958" cy="1049.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="1967" y="1053.6738">operator==(const HardwareSettings&amp; other) : bool {query}</text><ellipse cx="1958" cy="1067.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="276" x="1967" y="1071.2832">registerContains(const String&amp; name) : bool</text><ellipse cx="1958" cy="1084.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="317" x="1967" y="1088.8926">buttons() : std::map&lt;int , ButtonSettings&gt;&amp; {query}</text><ellipse cx="1958" cy="1102.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="1967" y="1106.502">leds() : std::map&lt;int , LedSettings&gt;&amp; {query}</text><ellipse cx="1958" cy="1119.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="1967" y="1124.1113">clear() : void</text><ellipse cx="1958" cy="1137.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="1967" y="1141.7207">print(Print&amp; out) : void {query}</text></g><!--MD5=[2510c0a1d62bf8ba30be78be01ab8cef]
class SpaIot.LedSettings--><g id="elem_SpaIot.LedSettings"><rect codeLine="219" fill="#F1F1F1" height="347.3594" id="SpaIot.LedSettings" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="354" x="2822" y="766.5"/><ellipse cx="2957.25" cy="782.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2960.0156,778.375 Q2960.1719,778.1563 2960.3594,778.0469 Q2960.5469,777.9375 2960.7656,777.9375 Q2961.1406,777.9375 2961.375,778.1953 Q2961.6094,778.4531 2961.6094,779.0625 L2961.6094,780.5156 Q2961.6094,781.125 2961.375,781.3906 Q2961.1406,781.6563 2960.7656,781.6563 Q2960.4219,781.6563 2960.2188,781.4531 Q2960.0156,781.2656 2959.9063,780.75 Q2959.8594,780.3906 2959.6719,780.2031 Q2959.3438,779.8281 2958.7344,779.6094 Q2958.125,779.3906 2957.5,779.3906 Q2956.7344,779.3906 2956.1016,779.7188 Q2955.4688,780.0469 2954.9766,780.7969 Q2954.4844,781.5469 2954.4844,782.5781 L2954.4844,783.6719 Q2954.4844,784.9063 2955.375,785.7266 Q2956.2656,786.5469 2957.8594,786.5469 Q2958.7969,786.5469 2959.4531,786.2969 Q2959.8438,786.1406 2960.2656,785.7031 Q2960.5313,785.4375 2960.6797,785.3594 Q2960.8281,785.2813 2961.0313,785.2813 Q2961.3594,785.2813 2961.6172,785.5391 Q2961.875,785.7969 2961.875,786.1406 Q2961.875,786.4844 2961.5313,786.8906 Q2961.0313,787.4688 2960.2344,787.7969 Q2959.1563,788.25 2957.8594,788.25 Q2956.3438,788.25 2955.1406,787.625 Q2954.1563,787.125 2953.4688,786.0547 Q2952.7813,784.9844 2952.7813,783.7031 L2952.7813,782.5469 Q2952.7813,781.2188 2953.3984,780.0703 Q2954.0156,778.9219 2955.1094,778.3047 Q2956.2031,777.6875 2957.4375,777.6875 Q2958.1719,777.6875 2958.8203,777.8516 Q2959.4688,778.0156 2960.0156,778.375 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="2977.75" y="788.2285">LedSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="2823" x2="3175" y1="798.5" y2="798.5"/><polygon fill="none" points="2833,807.8047,2837,811.8047,2833,815.8047,2829,811.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="2842" y="817.0332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2823" x2="3175" y1="824.1094" y2="824.1094"/><ellipse cx="2833" cy="838.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="2842" y="842.6426">LedSettings()</text><ellipse cx="2833" cy="856.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="2842" y="860.252">LedSettings(const uint8_t order)</text><ellipse cx="2833" cy="873.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="2842" y="877.8613">LedSettings(const LedSettings&amp; other)</text><ellipse cx="2833" cy="891.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="2842" y="895.4707">LedSettings(LedSettings&amp;&amp; other)</text><polygon fill="#FFFF44" points="2833,903.8516,2837,907.8516,2833,911.8516,2829,907.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="2842" y="913.0801">LedSettings(Private&amp; dd)</text><ellipse cx="2833" cy="926.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="2842" y="930.6895">~LedSettings()</text><ellipse cx="2833" cy="944.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="327" x="2842" y="948.2988">operator=(const LedSettings&amp; other) : LedSettings&amp;</text><ellipse cx="2833" cy="961.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="298" x="2842" y="965.9082">operator=(LedSettings&amp;&amp; other) : LedSettings&amp;</text><ellipse cx="2833" cy="979.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="2842" y="983.5176">isEmpty() : bool {query}</text><ellipse cx="2833" cy="996.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2842" y="1001.127">isNull() : bool {query}</text><ellipse cx="2833" cy="1014.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="2842" y="1018.7363">operator!=(const LedSettings&amp; other) : bool {query}</text><ellipse cx="2833" cy="1032.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="2842" y="1036.3457">operator==(const LedSettings&amp; other) : bool {query}</text><ellipse cx="2833" cy="1049.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="2842" y="1053.9551">frame() : uint16_t {query}</text><ellipse cx="2833" cy="1067.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="2842" y="1071.5645">order() : uint8_t {query}</text><ellipse cx="2833" cy="1084.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="2842" y="1089.1738">clear() : void</text><ellipse cx="2833" cy="1102.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="2842" y="1106.7832">setOrder(const uint8_t order) : void</text></g><!--MD5=[898141c6e6c72091a3d23b9893b66a57]
class SpaIot.Multiplexer--><g id="elem_SpaIot.Multiplexer"><rect codeLine="239" fill="#F1F1F1" height="400.1875" id="SpaIot.Multiplexer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="521" x="767.5" y="740"/><ellipse cx="990.25" cy="756" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M993.0156,751.875 Q993.1719,751.6563 993.3594,751.5469 Q993.5469,751.4375 993.7656,751.4375 Q994.1406,751.4375 994.375,751.6953 Q994.6094,751.9531 994.6094,752.5625 L994.6094,754.0156 Q994.6094,754.625 994.375,754.8906 Q994.1406,755.1563 993.7656,755.1563 Q993.4219,755.1563 993.2188,754.9531 Q993.0156,754.7656 992.9063,754.25 Q992.8594,753.8906 992.6719,753.7031 Q992.3438,753.3281 991.7344,753.1094 Q991.125,752.8906 990.5,752.8906 Q989.7344,752.8906 989.1016,753.2188 Q988.4688,753.5469 987.9766,754.2969 Q987.4844,755.0469 987.4844,756.0781 L987.4844,757.1719 Q987.4844,758.4063 988.375,759.2266 Q989.2656,760.0469 990.8594,760.0469 Q991.7969,760.0469 992.4531,759.7969 Q992.8438,759.6406 993.2656,759.2031 Q993.5313,758.9375 993.6797,758.8594 Q993.8281,758.7813 994.0313,758.7813 Q994.3594,758.7813 994.6172,759.0391 Q994.875,759.2969 994.875,759.6406 Q994.875,759.9844 994.5313,760.3906 Q994.0313,760.9688 993.2344,761.2969 Q992.1563,761.75 990.8594,761.75 Q989.3438,761.75 988.1406,761.125 Q987.1563,760.625 986.4688,759.5547 Q985.7813,758.4844 985.7813,757.2031 L985.7813,756.0469 Q985.7813,754.7188 986.3984,753.5703 Q987.0156,752.4219 988.1094,751.8047 Q989.2031,751.1875 990.4375,751.1875 Q991.1719,751.1875 991.8203,751.3516 Q992.4688,751.5156 993.0156,751.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="1010.75" y="761.7285">Multiplexer</text><line style="stroke:#181818;stroke-width:0.5;" x1="768.5" x2="1287.5" y1="772" y2="772"/><line style="stroke:#181818;stroke-width:0.5;" x1="768.5" x2="1287.5" y1="780" y2="780"/><ellipse cx="778.5" cy="794.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="787.5" y="798.5332">Multiplexer(const std::initializer_list&lt;int&gt;&amp; spins, int inhPin)</text><ellipse cx="778.5" cy="811.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="495" x="787.5" y="816.1426">Multiplexer(const String&amp; name, const std::initializer_list&lt;int&gt;&amp; spins, int inhPin)</text><ellipse cx="778.5" cy="829.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="787.5" y="833.752">Multiplexer()</text><ellipse cx="778.5" cy="847.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="228" x="787.5" y="851.3613">Multiplexer(const Multiplexer&amp; other)</text><ellipse cx="778.5" cy="864.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="199" x="787.5" y="868.9707">Multiplexer(Multiplexer&amp;&amp; other)</text><polygon fill="#FFFF44" points="778.5,877.3516,782.5,881.3516,778.5,885.3516,774.5,881.3516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="787.5" y="886.5801">Multiplexer(Private&amp; dd)</text><ellipse cx="778.5" cy="899.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="787.5" y="904.1895">operator=(const Multiplexer&amp; other) : Multiplexer&amp;</text><ellipse cx="778.5" cy="917.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="787.5" y="921.7988">operator=(Multiplexer&amp;&amp; other) : Multiplexer&amp;</text><ellipse cx="778.5" cy="935.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="787.5" y="939.4082">isEmpty() : bool {query}</text><ellipse cx="778.5" cy="952.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="787.5" y="957.0176">operator==(const ButtonController&amp; other) : bool {query}</text><ellipse cx="778.5" cy="970.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="787.5" y="974.627">inhPin() : int {query}</text><ellipse cx="778.5" cy="988.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="787.5" y="992.2363">select(int button) : int</text><ellipse cx="778.5" cy="1005.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="787.5" y="1009.8457">selectPin(int order) : int {query}</text><ellipse cx="778.5" cy="1023.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="787.5" y="1027.4551">size() : int {query}</text><ellipse cx="778.5" cy="1040.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="787.5" y="1045.0645">begin() : void</text><ellipse cx="778.5" cy="1058.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="787.5" y="1062.6738">clear() : void</text><ellipse cx="778.5" cy="1076.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="787.5" y="1080.2832">deselect() : void</text><ellipse cx="778.5" cy="1093.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="787.5" y="1097.8926">end() : void</text><ellipse cx="778.5" cy="1111.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="787.5" y="1115.502">setInhPin(int pin) : void</text><ellipse cx="778.5" cy="1128.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="787.5" y="1133.1113">setSelectPin(int order, int pin) : void</text></g><!--MD5=[41520719889c274611cce6030b67a8c1]
class SpaIot.Pcf8574Mux--><g id="elem_SpaIot.Pcf8574Mux"><rect codeLine="262" fill="#F1F1F1" height="312.1406" id="SpaIot.Pcf8574Mux" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="588" x="1324" y="784"/><ellipse cx="1575.25" cy="800" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1578.0156,795.875 Q1578.1719,795.6563 1578.3594,795.5469 Q1578.5469,795.4375 1578.7656,795.4375 Q1579.1406,795.4375 1579.375,795.6953 Q1579.6094,795.9531 1579.6094,796.5625 L1579.6094,798.0156 Q1579.6094,798.625 1579.375,798.8906 Q1579.1406,799.1563 1578.7656,799.1563 Q1578.4219,799.1563 1578.2188,798.9531 Q1578.0156,798.7656 1577.9063,798.25 Q1577.8594,797.8906 1577.6719,797.7031 Q1577.3438,797.3281 1576.7344,797.1094 Q1576.125,796.8906 1575.5,796.8906 Q1574.7344,796.8906 1574.1016,797.2188 Q1573.4688,797.5469 1572.9766,798.2969 Q1572.4844,799.0469 1572.4844,800.0781 L1572.4844,801.1719 Q1572.4844,802.4063 1573.375,803.2266 Q1574.2656,804.0469 1575.8594,804.0469 Q1576.7969,804.0469 1577.4531,803.7969 Q1577.8438,803.6406 1578.2656,803.2031 Q1578.5313,802.9375 1578.6797,802.8594 Q1578.8281,802.7813 1579.0313,802.7813 Q1579.3594,802.7813 1579.6172,803.0391 Q1579.875,803.2969 1579.875,803.6406 Q1579.875,803.9844 1579.5313,804.3906 Q1579.0313,804.9688 1578.2344,805.2969 Q1577.1563,805.75 1575.8594,805.75 Q1574.3438,805.75 1573.1406,805.125 Q1572.1563,804.625 1571.4688,803.5547 Q1570.7813,802.4844 1570.7813,801.2031 L1570.7813,800.0469 Q1570.7813,798.7188 1571.3984,797.5703 Q1572.0156,796.4219 1573.1094,795.8047 Q1574.2031,795.1875 1575.4375,795.1875 Q1576.1719,795.1875 1576.8203,795.3516 Q1577.4688,795.5156 1578.0156,795.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="1595.75" y="805.7285">Pcf8574Mux</text><line style="stroke:#181818;stroke-width:0.5;" x1="1325" x2="1911" y1="816" y2="816"/><line style="stroke:#181818;stroke-width:0.5;" x1="1325" x2="1911" y1="824" y2="824"/><ellipse cx="1335" cy="838.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="431" x="1344" y="842.5332">Pcf8574Mux(uint8_t slaveAddress, TwoWire&amp; bus, uint8_t idleValue)</text><ellipse cx="1335" cy="855.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="562" x="1344" y="860.1426">Pcf8574Mux(const String&amp; name, uint8_t slaveAddress, TwoWire&amp; bus, uint8_t idleValue)</text><ellipse cx="1335" cy="873.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="1344" y="877.752">Pcf8574Mux(const Pcf8574Mux&amp; other)</text><ellipse cx="1335" cy="891.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="1344" y="895.3613">Pcf8574Mux(Pcf8574Mux&amp;&amp; other)</text><polygon fill="#FFFF44" points="1335,903.7422,1339,907.7422,1335,911.7422,1331,907.7422" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="1344" y="912.9707">Pcf8574Mux(Private&amp; dd)</text><ellipse cx="1335" cy="926.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="1344" y="930.5801">operator=(const Pcf8574Mux&amp; other) : Pcf8574Mux&amp;</text><ellipse cx="1335" cy="943.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="302" x="1344" y="948.1895">operator=(Pcf8574Mux&amp;&amp; other) : Pcf8574Mux&amp;</text><ellipse cx="1335" cy="961.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="1344" y="965.7988">isEmpty() : bool {query}</text><ellipse cx="1335" cy="979.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="1344" y="983.4082">operator==(const ButtonController&amp; other) : bool {query}</text><ellipse cx="1335" cy="996.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="1344" y="1001.0176">select(int button) : int</text><ellipse cx="1335" cy="1014.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="1344" y="1018.627">address() : uint8_t {query}</text><ellipse cx="1335" cy="1032.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="1344" y="1036.2363">begin() : void</text><ellipse cx="1335" cy="1049.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="1344" y="1053.8457">clear() : void</text><ellipse cx="1335" cy="1067.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="1344" y="1071.4551">deselect() : void</text><ellipse cx="1335" cy="1084.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="1344" y="1089.0645">end() : void</text></g><!--MD5=[c2ea5fde389efdfd25fc3872be25d20c]
class SpaIot.ServerSettings--><g id="elem_SpaIot.ServerSettings"><rect codeLine="280" fill="#F1F1F1" height="382.5781" id="SpaIot.ServerSettings" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="402" x="3211" y="748.5"/><ellipse cx="3361.25" cy="764.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3364.0156,760.375 Q3364.1719,760.1563 3364.3594,760.0469 Q3364.5469,759.9375 3364.7656,759.9375 Q3365.1406,759.9375 3365.375,760.1953 Q3365.6094,760.4531 3365.6094,761.0625 L3365.6094,762.5156 Q3365.6094,763.125 3365.375,763.3906 Q3365.1406,763.6563 3364.7656,763.6563 Q3364.4219,763.6563 3364.2188,763.4531 Q3364.0156,763.2656 3363.9063,762.75 Q3363.8594,762.3906 3363.6719,762.2031 Q3363.3438,761.8281 3362.7344,761.6094 Q3362.125,761.3906 3361.5,761.3906 Q3360.7344,761.3906 3360.1016,761.7188 Q3359.4688,762.0469 3358.9766,762.7969 Q3358.4844,763.5469 3358.4844,764.5781 L3358.4844,765.6719 Q3358.4844,766.9063 3359.375,767.7266 Q3360.2656,768.5469 3361.8594,768.5469 Q3362.7969,768.5469 3363.4531,768.2969 Q3363.8438,768.1406 3364.2656,767.7031 Q3364.5313,767.4375 3364.6797,767.3594 Q3364.8281,767.2813 3365.0313,767.2813 Q3365.3594,767.2813 3365.6172,767.5391 Q3365.875,767.7969 3365.875,768.1406 Q3365.875,768.4844 3365.5313,768.8906 Q3365.0313,769.4688 3364.2344,769.7969 Q3363.1563,770.25 3361.8594,770.25 Q3360.3438,770.25 3359.1406,769.625 Q3358.1563,769.125 3357.4688,768.0547 Q3356.7813,766.9844 3356.7813,765.7031 L3356.7813,764.5469 Q3356.7813,763.2188 3357.3984,762.0703 Q3358.0156,760.9219 3359.1094,760.3047 Q3360.2031,759.6875 3361.4375,759.6875 Q3362.1719,759.6875 3362.8203,759.8516 Q3363.4688,760.0156 3364.0156,760.375 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="3381.75" y="770.2285">ServerSettings</text><line style="stroke:#181818;stroke-width:0.5;" x1="3212" x2="3612" y1="780.5" y2="780.5"/><polygon fill="none" points="3222,789.8047,3226,793.8047,3222,797.8047,3218,793.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="3231" y="799.0332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="3212" x2="3612" y1="806.1094" y2="806.1094"/><ellipse cx="3222" cy="820.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="3231" y="824.6426">ServerSettings()</text><ellipse cx="3222" cy="838.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="376" x="3231" y="842.252">ServerSettings(const String&amp; model, unsigned long interval)</text><ellipse cx="3222" cy="855.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="3231" y="859.8613">ServerSettings(const char* model, unsigned long interval)</text><ellipse cx="3222" cy="873.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="280" x="3231" y="877.4707">ServerSettings(const ServerSettings&amp; other)</text><ellipse cx="3222" cy="890.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="251" x="3231" y="895.0801">ServerSettings(ServerSettings&amp;&amp; other)</text><polygon fill="#FFFF44" points="3222,903.4609,3226,907.4609,3222,911.4609,3218,907.4609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="3231" y="912.6895">ServerSettings(Private&amp; dd)</text><ellipse cx="3222" cy="926.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="3231" y="930.2988">~ServerSettings()</text><ellipse cx="3222" cy="943.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="3231" y="947.9082">operator=(const ServerSettings&amp; other) : ServerSettings&amp;</text><ellipse cx="3222" cy="961.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="334" x="3231" y="965.5176">operator=(ServerSettings&amp;&amp; other) : ServerSettings&amp;</text><ellipse cx="3222" cy="978.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179" x="3231" y="983.127">spaModel() : String&amp; {query}</text><ellipse cx="3222" cy="996.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="3231" y="1000.7363">isEmpty() : bool {query}</text><ellipse cx="3222" cy="1014.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="3231" y="1018.3457">isNull() : bool {query}</text><ellipse cx="3222" cy="1031.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="343" x="3231" y="1035.9551">operator!=(const ServerSettings&amp; other) : bool {query}</text><ellipse cx="3222" cy="1049.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="346" x="3231" y="1053.5645">operator==(const ServerSettings&amp; other) : bool {query}</text><ellipse cx="3222" cy="1066.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="252" x="3231" y="1071.1738">publishInterval() : unsigned long {query}</text><ellipse cx="3222" cy="1084.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="3231" y="1088.7832">clear() : void</text><ellipse cx="3222" cy="1102.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="298" x="3231" y="1106.3926">setPublishInterval(unsigned long interval) : void</text><ellipse cx="3222" cy="1119.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="3231" y="1124.002">setSpaModel(const String&amp; model) : void</text></g><!--MD5=[912e7ad1ab58a7a58605172b96e9f032]
class SpaIot.SpaClient--><g id="elem_SpaIot.SpaClient"><rect codeLine="302" fill="#F1F1F1" height="646.7188" id="SpaIot.SpaClient" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="449" x="2142.5" y="1209"/><ellipse cx="2332.25" cy="1225" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2335.0156,1220.875 Q2335.1719,1220.6563 2335.3594,1220.5469 Q2335.5469,1220.4375 2335.7656,1220.4375 Q2336.1406,1220.4375 2336.375,1220.6953 Q2336.6094,1220.9531 2336.6094,1221.5625 L2336.6094,1223.0156 Q2336.6094,1223.625 2336.375,1223.8906 Q2336.1406,1224.1563 2335.7656,1224.1563 Q2335.4219,1224.1563 2335.2188,1223.9531 Q2335.0156,1223.7656 2334.9063,1223.25 Q2334.8594,1222.8906 2334.6719,1222.7031 Q2334.3438,1222.3281 2333.7344,1222.1094 Q2333.125,1221.8906 2332.5,1221.8906 Q2331.7344,1221.8906 2331.1016,1222.2188 Q2330.4688,1222.5469 2329.9766,1223.2969 Q2329.4844,1224.0469 2329.4844,1225.0781 L2329.4844,1226.1719 Q2329.4844,1227.4063 2330.375,1228.2266 Q2331.2656,1229.0469 2332.8594,1229.0469 Q2333.7969,1229.0469 2334.4531,1228.7969 Q2334.8438,1228.6406 2335.2656,1228.2031 Q2335.5313,1227.9375 2335.6797,1227.8594 Q2335.8281,1227.7813 2336.0313,1227.7813 Q2336.3594,1227.7813 2336.6172,1228.0391 Q2336.875,1228.2969 2336.875,1228.6406 Q2336.875,1228.9844 2336.5313,1229.3906 Q2336.0313,1229.9688 2335.2344,1230.2969 Q2334.1563,1230.75 2332.8594,1230.75 Q2331.3438,1230.75 2330.1406,1230.125 Q2329.1563,1229.625 2328.4688,1228.5547 Q2327.7813,1227.4844 2327.7813,1226.2031 L2327.7813,1225.0469 Q2327.7813,1223.7188 2328.3984,1222.5703 Q2329.0156,1221.4219 2330.1094,1220.8047 Q2331.2031,1220.1875 2332.4375,1220.1875 Q2333.1719,1220.1875 2333.8203,1220.3516 Q2334.4688,1220.5156 2335.0156,1220.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="2352.75" y="1230.7285">SpaClient</text><line style="stroke:#181818;stroke-width:0.5;" x1="2143.5" x2="2590.5" y1="1241" y2="1241"/><polygon fill="none" points="2153.5,1250.3047,2157.5,1254.3047,2153.5,1258.3047,2149.5,1254.3047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="2162.5" y="1259.5332">d_ptr : std::unique_ptr&lt;Private&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="2143.5" x2="2590.5" y1="1266.6094" y2="1266.6094"/><ellipse cx="2153.5" cy="1280.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="2162.5" y="1285.1426">SpaClient()</text><ellipse cx="2153.5" cy="1298.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="385" x="2162.5" y="1302.752">SpaClient(std::initializer_list&lt;Event::Type&gt; subscribedEvents)</text><ellipse cx="2153.5" cy="1316.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="372" x="2162.5" y="1320.3613">SpaClient(const std::set&lt;Event::Type&gt;&amp; subscribedEvents)</text><ellipse cx="2153.5" cy="1333.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="2162.5" y="1337.9707">SpaClient(const SpaClient&amp; other)</text><ellipse cx="2153.5" cy="1351.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="2162.5" y="1355.5801">SpaClient(SpaClient&amp;&amp; other)</text><polygon fill="#FFFF44" points="2153.5,1363.9609,2157.5,1367.9609,2153.5,1371.9609,2149.5,1367.9609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="2162.5" y="1373.1895">SpaClient(const char* className)</text><polygon fill="#FFFF44" points="2153.5,1381.5703,2157.5,1385.5703,2153.5,1389.5703,2149.5,1385.5703" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="2162.5" y="1390.7988">SpaClient(Private&amp; dd)</text><ellipse cx="2153.5" cy="1404.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="2162.5" y="1408.4082">~SpaClient()</text><ellipse cx="2153.5" cy="1421.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="2162.5" y="1426.0176">read() : Event</text><ellipse cx="2153.5" cy="1439.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="2162.5" y="1443.627">read(Event::Type type) : Event</text><ellipse cx="2153.5" cy="1457.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="299" x="2162.5" y="1461.2363">operator=(const SpaClient&amp; other) : SpaClient&amp;</text><ellipse cx="2153.5" cy="1474.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="2162.5" y="1478.8457">operator=(SpaClient&amp;&amp; other) : SpaClient&amp;</text><ellipse cx="2153.5" cy="1492.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="2162.5" y="1496.4551">className() : String&amp; {query}</text><ellipse cx="2153.5" cy="1509.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="2162.5" y="1514.0645">begin() : bool</text><ellipse cx="2153.5" cy="1527.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="2162.5" y="1531.6738">handle() : bool</text><ellipse cx="2153.5" cy="1545.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="2162.5" y="1549.2832">isEmpty() : bool {query}</text><ellipse cx="2153.5" cy="1562.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2162.5" y="1566.8926">isNull() : bool {query}</text><ellipse cx="2153.5" cy="1580.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="2162.5" y="1584.502">isOpen() : bool {query}</text><ellipse cx="2153.5" cy="1597.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="342" x="2162.5" y="1602.1113">isSubscribed(const Event::Type&amp; event) : bool {query}</text><ellipse cx="2153.5" cy="1615.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="2162.5" y="1619.7207">operator!=(const SpaClient&amp; other) : bool {query}</text><ellipse cx="2153.5" cy="1633.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="2162.5" y="1637.3301">operator==(const SpaClient&amp; other) : bool {query}</text><polygon fill="#FFFF44" points="2153.5,1645.7109,2157.5,1649.7109,2153.5,1653.7109,2149.5,1649.7109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="2162.5" y="1654.9395">pollSpaEvents() : bool</text><polygon fill="#FFFF44" points="2153.5,1663.3203,2157.5,1667.3203,2153.5,1671.3203,2149.5,1667.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="2162.5" y="1672.5488">pullFromSpa(Event&amp; event) : bool</text><ellipse cx="2153.5" cy="1685.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="2162.5" y="1690.1582">write(const Event&amp; event) : bool</text><ellipse cx="2153.5" cy="1703.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="2162.5" y="1707.7676">available() : int {query}</text><ellipse cx="2153.5" cy="1721.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="2162.5" y="1725.377">subscribedEvents() : std::set&lt;Event::Type&gt;&amp; {query}</text><polygon fill="#FFFF44" points="2153.5,1733.7578,2157.5,1737.7578,2153.5,1741.7578,2149.5,1737.7578" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="2162.5" y="1742.9863">spaValue(Event::Type type) : uint16_t {query}</text><ellipse cx="2153.5" cy="1756.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="2162.5" y="1760.5957">clear() : void</text><ellipse cx="2153.5" cy="1773.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="2162.5" y="1778.2051">end() : void</text><polygon fill="#FFFF44" points="2153.5,1786.5859,2157.5,1790.5859,2153.5,1794.5859,2149.5,1790.5859" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="2162.5" y="1795.8145">pushToSpa(const Event&amp; event) : void</text><ellipse cx="2153.5" cy="1809.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="423" x="2162.5" y="1813.4238">subscribe(std::initializer_list&lt;Event::Type&gt; subscribedEvents) : void</text><ellipse cx="2153.5" cy="1826.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="2162.5" y="1831.0332">subscribe(std::set&lt;Event::Type&gt; subscribedEvents) : void</text><ellipse cx="2153.5" cy="1844.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="224" x="2162.5" y="1848.6426">subscribe(Event::Type event) : void</text></g><!--MD5=[d8aeb1a48a0ddde7bc0c8202ed6d5374]
class SpaIot.SpaServer--><g id="elem_SpaIot.SpaServer"><rect codeLine="339" fill="#F1F1F1" height="259.3125" id="SpaIot.SpaServer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="496" x="39" y="1403"/><ellipse cx="249.25" cy="1419" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M252.0156,1414.875 Q252.1719,1414.6563 252.3594,1414.5469 Q252.5469,1414.4375 252.7656,1414.4375 Q253.1406,1414.4375 253.375,1414.6953 Q253.6094,1414.9531 253.6094,1415.5625 L253.6094,1417.0156 Q253.6094,1417.625 253.375,1417.8906 Q253.1406,1418.1563 252.7656,1418.1563 Q252.4219,1418.1563 252.2188,1417.9531 Q252.0156,1417.7656 251.9063,1417.25 Q251.8594,1416.8906 251.6719,1416.7031 Q251.3438,1416.3281 250.7344,1416.1094 Q250.125,1415.8906 249.5,1415.8906 Q248.7344,1415.8906 248.1016,1416.2188 Q247.4688,1416.5469 246.9766,1417.2969 Q246.4844,1418.0469 246.4844,1419.0781 L246.4844,1420.1719 Q246.4844,1421.4063 247.375,1422.2266 Q248.2656,1423.0469 249.8594,1423.0469 Q250.7969,1423.0469 251.4531,1422.7969 Q251.8438,1422.6406 252.2656,1422.2031 Q252.5313,1421.9375 252.6797,1421.8594 Q252.8281,1421.7813 253.0313,1421.7813 Q253.3594,1421.7813 253.6172,1422.0391 Q253.875,1422.2969 253.875,1422.6406 Q253.875,1422.9844 253.5313,1423.3906 Q253.0313,1423.9688 252.2344,1424.2969 Q251.1563,1424.75 249.8594,1424.75 Q248.3438,1424.75 247.1406,1424.125 Q246.1563,1423.625 245.4688,1422.5547 Q244.7813,1421.4844 244.7813,1420.2031 L244.7813,1419.0469 Q244.7813,1417.7188 245.3984,1416.5703 Q246.0156,1415.4219 247.1094,1414.8047 Q248.2031,1414.1875 249.4375,1414.1875 Q250.1719,1414.1875 250.8203,1414.3516 Q251.4688,1414.5156 252.0156,1414.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="269.75" y="1424.7285">SpaServer</text><line style="stroke:#181818;stroke-width:0.5;" x1="40" x2="534" y1="1435" y2="1435"/><line style="stroke:#181818;stroke-width:0.5;" x1="40" x2="534" y1="1443" y2="1443"/><ellipse cx="50" cy="1457.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="77" x="59" y="1461.5332">SpaServer()</text><polygon fill="#FFFF44" points="50,1469.9141,54,1473.9141,50,1477.9141,46,1473.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="59" y="1479.1426">SpaServer(Private&amp; dd)</text><ellipse cx="50" cy="1492.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="59" y="1496.752">settings() : ServerSettings* {query}</text><ellipse cx="50" cy="1510.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="327" x="59" y="1514.3613">client(const String&amp; className) : SpaClient* {query}</text><ellipse cx="50" cy="1527.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="59" y="1531.9707">addClient(SpaClient&amp; client) : bool</text><ellipse cx="50" cy="1545.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="470" x="59" y="1549.5801">begin(const ServerSettings&amp; settings, unsigned long waitingTimeMs) : bool</text><ellipse cx="50" cy="1562.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="59" y="1567.1895">handle() : bool</text><ellipse cx="50" cy="1580.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288" x="59" y="1584.7988">removeClient(const String&amp; className) : bool</text><ellipse cx="50" cy="1598.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="275" x="59" y="1602.4082">removeClient(const char* className) : bool</text><ellipse cx="50" cy="1615.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="59" y="1620.0176">removeClient(const SpaClient&amp; client) : bool</text><ellipse cx="50" cy="1633.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="59" y="1637.627">clientCount() : int {query}</text><ellipse cx="50" cy="1651.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="59" y="1655.2363">end() : void</text></g><!--MD5=[5357466db6bc81820579fd9368ec529e]
class SpaIot.Event::Type--><g id="elem_SpaIot.Event::Type"><rect codeLine="354" fill="#F1F1F1" height="312.1406" id="SpaIot.Event::Type" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="145" x="587.5" y="784"/><ellipse cx="619.15" cy="800" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M618.0094,800.7969 L618.0094,803.2969 L622.3375,803.2969 L622.3375,802.375 Q622.3375,801.7656 622.5797,801.5 Q622.8219,801.2344 623.1969,801.2344 Q623.5719,801.2344 623.8063,801.5 Q624.0406,801.7656 624.0406,802.375 L624.0406,805 L616.0406,805 Q615.4156,805 615.1578,804.7656 Q614.9,804.5313 614.9,804.1406 Q614.9,803.7656 615.1656,803.5313 Q615.4313,803.2969 616.0406,803.2969 L616.3063,803.2969 L616.3063,796.6406 L616.0406,796.6406 Q615.4156,796.6406 615.1578,796.4063 Q614.9,796.1719 614.9,795.7813 Q614.9,795.4063 615.1578,795.1719 Q615.4156,794.9375 616.0406,794.9375 L623.6656,794.9375 L623.6656,797.5313 Q623.6656,798.1406 623.4391,798.3984 Q623.2125,798.6563 622.8219,798.6563 Q622.4469,798.6563 622.2125,798.3984 Q621.9781,798.1406 621.9781,797.5313 L621.9781,796.6406 L618.0094,796.6406 L618.0094,799.0938 L619.4938,799.0938 Q619.4938,798.4375 619.6188,798.25 Q619.8844,797.8438 620.3531,797.8438 Q620.7281,797.8438 620.9625,798.1016 Q621.1969,798.3594 621.1969,798.9688 L621.1969,800.9375 Q621.1969,801.4844 621.0719,801.6719 Q620.8063,802.0625 620.3531,802.0625 Q619.8844,802.0625 619.6188,801.6563 Q619.4938,801.4688 619.4938,800.7969 L618.0094,800.7969 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="636.85" y="805.7285">Event::Type</text><line style="stroke:#181818;stroke-width:0.5;" x1="588.5" x2="731.5" y1="816" y2="816"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="593.5" y="834.5332">AmbientTemperature</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="593.5" y="852.1426">AnyEvent</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="593.5" y="869.752">BubbleOn</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="593.5" y="887.3613">DesiredTemp</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="66" x="593.5" y="904.9707">ErrorCode</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="51" x="593.5" y="922.5801">FilterOn</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="593.5" y="940.1895">HeatReached</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="593.5" y="957.7988">HeaterOn</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="593.5" y="975.4082">JetOn</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="53" x="593.5" y="993.0176">NoEvent</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="593.5" y="1010.627">PowerOn</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="593.5" y="1028.2363">SanitizerOn</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="593.5" y="1045.8457">SanitizerTime</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="593.5" y="1063.4551">SetDesiredTemp</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="593.5" y="1081.0645">WaterTemp</text><line style="stroke:#181818;stroke-width:0.5;" x1="588.5" x2="731.5" y1="1088.1406" y2="1088.1406"/></g><!--MD5=[480a832a49b87db85871162ca6733495]
class SpaIot.Key--><g id="elem_SpaIot.Key"><rect codeLine="372" fill="#F1F1F1" height="224.0938" id="SpaIot.Key" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="98" x="2627" y="1420.5"/><ellipse cx="2660.9" cy="1436.5" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2659.7594,1437.2969 L2659.7594,1439.7969 L2664.0875,1439.7969 L2664.0875,1438.875 Q2664.0875,1438.2656 2664.3297,1438 Q2664.5719,1437.7344 2664.9469,1437.7344 Q2665.3219,1437.7344 2665.5563,1438 Q2665.7906,1438.2656 2665.7906,1438.875 L2665.7906,1441.5 L2657.7906,1441.5 Q2657.1656,1441.5 2656.9078,1441.2656 Q2656.65,1441.0313 2656.65,1440.6406 Q2656.65,1440.2656 2656.9156,1440.0313 Q2657.1813,1439.7969 2657.7906,1439.7969 L2658.0563,1439.7969 L2658.0563,1433.1406 L2657.7906,1433.1406 Q2657.1656,1433.1406 2656.9078,1432.9063 Q2656.65,1432.6719 2656.65,1432.2813 Q2656.65,1431.9063 2656.9078,1431.6719 Q2657.1656,1431.4375 2657.7906,1431.4375 L2665.4156,1431.4375 L2665.4156,1434.0313 Q2665.4156,1434.6406 2665.1891,1434.8984 Q2664.9625,1435.1563 2664.5719,1435.1563 Q2664.1969,1435.1563 2663.9625,1434.8984 Q2663.7281,1434.6406 2663.7281,1434.0313 L2663.7281,1433.1406 L2659.7594,1433.1406 L2659.7594,1435.5938 L2661.2438,1435.5938 Q2661.2438,1434.9375 2661.3688,1434.75 Q2661.6344,1434.3438 2662.1031,1434.3438 Q2662.4781,1434.3438 2662.7125,1434.6016 Q2662.9469,1434.8594 2662.9469,1435.4688 L2662.9469,1437.4375 Q2662.9469,1437.9844 2662.8219,1438.1719 Q2662.5563,1438.5625 2662.1031,1438.5625 Q2661.6344,1438.5625 2661.3688,1438.1563 Q2661.2438,1437.9688 2661.2438,1437.2969 L2659.7594,1437.2969 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="24" x="2679.1" y="1442.2285">Key</text><line style="stroke:#181818;stroke-width:0.5;" x1="2628" x2="2724" y1="1452.5" y2="1452.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="44" x="2633" y="1471.0332">Bubble</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="32" x="2633" y="1488.6426">Filter</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="2633" y="1506.252">HeatReached</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="42" x="2633" y="1523.8613">Heater</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="18" x="2633" y="1541.4707">Jet</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="2633" y="1559.0801">Power</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="54" x="2633" y="1576.6895">Sanitizer</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="2633" y="1594.2988">TempDown</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="2633" y="1611.9082">TempUnit</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="53" x="2633" y="1629.5176">TempUp</text><line style="stroke:#181818;stroke-width:0.5;" x1="2628" x2="2724" y1="1636.5938" y2="1636.5938"/></g><!--MD5=[f7fd4017d4824458efcdcffe39aac9ea]
class SpaIot.Multiplexer::empty--><g id="elem_SpaIot.Multiplexer::empty"><rect codeLine="385" fill="#F1F1F1" height="188.875" id="SpaIot.Multiplexer::empty" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="145" x="955.5" y="1438"/><ellipse cx="970.5" cy="1454" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M969.3594,1454.7969 L969.3594,1457.2969 L973.6875,1457.2969 L973.6875,1456.375 Q973.6875,1455.7656 973.9297,1455.5 Q974.1719,1455.2344 974.5469,1455.2344 Q974.9219,1455.2344 975.1563,1455.5 Q975.3906,1455.7656 975.3906,1456.375 L975.3906,1459 L967.3906,1459 Q966.7656,1459 966.5078,1458.7656 Q966.25,1458.5313 966.25,1458.1406 Q966.25,1457.7656 966.5156,1457.5313 Q966.7813,1457.2969 967.3906,1457.2969 L967.6563,1457.2969 L967.6563,1450.6406 L967.3906,1450.6406 Q966.7656,1450.6406 966.5078,1450.4063 Q966.25,1450.1719 966.25,1449.7813 Q966.25,1449.4063 966.5078,1449.1719 Q966.7656,1448.9375 967.3906,1448.9375 L975.0156,1448.9375 L975.0156,1451.5313 Q975.0156,1452.1406 974.7891,1452.3984 Q974.5625,1452.6563 974.1719,1452.6563 Q973.7969,1452.6563 973.5625,1452.3984 Q973.3281,1452.1406 973.3281,1451.5313 L973.3281,1450.6406 L969.3594,1450.6406 L969.3594,1453.0938 L970.8438,1453.0938 Q970.8438,1452.4375 970.9688,1452.25 Q971.2344,1451.8438 971.7031,1451.8438 Q972.0781,1451.8438 972.3125,1452.1016 Q972.5469,1452.3594 972.5469,1452.9688 L972.5469,1454.9375 Q972.5469,1455.4844 972.4219,1455.6719 Q972.1563,1456.0625 971.7031,1456.0625 Q971.2344,1456.0625 970.9688,1455.6563 Q970.8438,1455.4688 970.8438,1454.7969 L969.3594,1454.7969 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="113" x="984.5" y="1459.7285">Multiplexer::empty</text><line style="stroke:#181818;stroke-width:0.5;" x1="956.5" x2="1099.5" y1="1470" y2="1470"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="9" x="961.5" y="1488.5332">A</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="9" x="961.5" y="1506.1426">B</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="10" x="961.5" y="1523.752">C</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="10" x="961.5" y="1541.3613">D</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="9" x="961.5" y="1558.9707">E</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="9" x="961.5" y="1576.5801">F</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="11" x="961.5" y="1594.1895">G</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="9" x="961.5" y="1611.7988">H</text><line style="stroke:#181818;stroke-width:0.5;" x1="956.5" x2="1099.5" y1="1618.875" y2="1618.875"/></g><!--MD5=[6f17c93706066deebe5d057df2d62242]
reverse link SpaIot.ButtonController to SpaIot.Multiplexer--><g id="link_SpaIot.ButtonController_SpaIot.Multiplexer"><path codeLine="403" d="M1302.23,599 C1264.38,645.92 1225.1,694.62 1188.51,739.99 " fill="none" id="SpaIot.ButtonController-backto-SpaIot.Multiplexer" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1297,594.33,1315,583.16,1307.89,603.12,1297,594.33" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[be0e1b39319030b874d0d37dadd3fa84]
reverse link SpaIot.ButtonController to SpaIot.Pcf8574Mux--><g id="link_SpaIot.ButtonController_SpaIot.Pcf8574Mux"><path codeLine="406" d="M1548.07,602.92 C1560.81,664.14 1574.12,728.11 1585.67,783.61 " fill="none" id="SpaIot.ButtonController-backto-SpaIot.Pcf8574Mux" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1541.18,604.16,1543.95,583.16,1554.88,601.31,1541.18,604.16" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[33c6b10ba31bae2f7fcc4313eec03ae9]
reverse link SpaIot.ControlPanel to SpaIot.SpaServer--><g id="link_SpaIot.ControlPanel_SpaIot.SpaServer"><path codeLine="409" d="M287,1169.42 C287,1248.59 287,1334.52 287,1402.79 " fill="none" id="SpaIot.ControlPanel-backto-SpaIot.SpaServer" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="280,1169.19,287,1149.19,294,1169.19,280,1169.19" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[23089f4f2f5da13248f6406f050e518c]
reverse link SpaIot.FrameDecoder to SpaIot.ControlPanel--><g id="link_SpaIot.FrameDecoder_SpaIot.ControlPanel"><path codeLine="412" d="M329.65,690.97 C327.35,704.39 325.06,717.69 322.81,730.74 " fill="none" id="SpaIot.FrameDecoder-backto-SpaIot.ControlPanel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="322.76,689.75,333.05,671.23,336.56,692.12,322.76,689.75" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[42116eec04eec600bd7dd4c318d13f6e]
reverse link SpaIot.Event to SpaIot.Event::Type--><g id="link_SpaIot.Event_SpaIot.Event::Type"><path codeLine="426" d="M816.83,596.7 C794,641.07 770.87,687.22 750,731 C741.87,748.05 733.63,766.02 725.6,783.96 " fill="none" id="SpaIot.Event-backto-SpaIot.Event::Type" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="820.0781" cy="590.4176" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="816.4063" x2="823.75" y1="597.5251" y2="583.31"/><line style="stroke:#181818;stroke-width:1.0;" x1="812.9706" x2="827.1857" y1="586.7457" y2="594.0894"/></g><!--MD5=[cb0f2479a170366c029c0c0af6b2dc86]
reverse link SpaIot.Multiplexer to SpaIot.Multiplexer::empty--><g id="link_SpaIot.Multiplexer_SpaIot.Multiplexer::empty"><path codeLine="429" d="M1028,1155.24 C1028,1252.3 1028,1362.02 1028,1437.82 " fill="none" id="SpaIot.Multiplexer-backto-SpaIot.Multiplexer::empty" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="1028" cy="1148.09" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1028" x2="1028" y1="1156.09" y2="1140.09"/><line style="stroke:#181818;stroke-width:1.0;" x1="1020" x2="1036" y1="1148.09" y2="1148.09"/></g><!--MD5=[4c3b43e70fb815655d5b7084cd4a6931]
@startuml





/' Objects '/

namespace SpaIot {
	class BusSettings {
		+BusSettings()
		+BusSettings(const int dataPin, const int clkPin, const int holdPin)
		+BusSettings(const std::initializer_list<int>& pins)
		+BusSettings(const BusSettings& other)
		+BusSettings(BusSettings&& other)
		#BusSettings(Private& dd)
		+~BusSettings()
		+operator=(const BusSettings& other) : BusSettings&
		+operator=(BusSettings&& other) : BusSettings&
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const BusSettings& other) : bool {query}
		+operator==(const BusSettings& other) : bool {query}
		+clkPin() : int {query}
		+dataPin() : int {query}
		+holdPin() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+clear() : void
		+setClkPin(int pin) : void
		+setDataPin(int pin) : void
		+setHoldPin(int pin) : void
	}

	class Button {
		+Button()
		+Button(const ButtonSettings& settings)
		+Button(const Button& other)
		+Button(Button&& other)
		#Button(Private& dd)
		+~Button()
		+operator=(const Button& other) : Button&
		+operator=(Button&& other) : Button&
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		+settings() : ButtonSettings& {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isPressed() : bool {query}
		+operator!=(const Button& other) : bool {query}
		+operator==(const Button& other) : bool {query}
		+id() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+begin() : void
		+clear() : void
		+press() : void
		+push() : void
		+release() : void
	}

	abstract class ButtonController {
		+ButtonController(const ButtonController& other)
		+ButtonController(ButtonController&& other)
		#ButtonController(Private& dd)
		+~ButtonController()
		+{static} getFromRegister(const String& name) : ButtonController&
		+operator=(const ButtonController& other) : ButtonController&
		+operator=(ButtonController&& other) : ButtonController&
		+name() : String& {query}
		+{static} addToRegister(const String& name, ButtonController& controller) : bool
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isSelected() : bool {query}
		+operator!=(const ButtonController& other) : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		+{abstract} select(int button) : int
		+selected() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+begin() : void
		+clear() : void
		+{abstract} deselect() : void
		+end() : void
	}

	class ButtonSettings {
		+ButtonSettings()
		+ButtonSettings(const String& controllerName, int buttonId)
		+ButtonSettings(ButtonController& controller, int buttonId)
		+ButtonSettings(const ButtonSettings& other)
		+ButtonSettings(ButtonSettings&& other)
		#ButtonSettings(Private& dd)
		+~ButtonSettings()
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		+operator=(const ButtonSettings& other) : ButtonSettings&
		+operator=(ButtonSettings&& other) : ButtonSettings&
		+controllerName() : String& {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const ButtonSettings& other) : bool {query}
		+operator==(const ButtonSettings& other) : bool {query}
		+id() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+clear() : void
		+setId(int id) : void
	}

	class ControlPanel {
		+ControlPanel()
		+ControlPanel(const HardwareSettings& hwsettings)
		+ControlPanel(const String& hwSettingsName)
		#ControlPanel(Private& dd)
		+button(int key) : Button&
		+hasButton(int key) : bool {query}
		+isOpen() : bool {query}
		+pushButton(int key) : bool
		+setDesiredTemp(uint16_t temp) : bool
		+setSanitizerTime(uint16_t time) : bool
		+buttonSettings() : std::map<int , ButtonSettings> {query}
		+waitForDesiredTemp(unsigned long MaxWaitingTimeMs) : uint16_t
		+setBubble(bool v) : uint8_t
		+setFilter(bool v) : uint8_t
		+setHeater(bool v) : uint8_t
		+setJet(bool v) : uint8_t
		+setPower(bool v) : uint8_t
		+begin(unsigned long waitingTimeMs) : void
		+begin(const HardwareSettings& hwsettings, unsigned long waitingTimeMs) : void
		+begin(const String& hwSettingsName, unsigned long waitingTimeMs) : void
		+end() : void
	}

	class Event {
		+Event(Type type, uint16_t value)
		+Event(const Event& other)
		+Event(Event&& other)
		#Event(Private& dd)
		+operatorbool() {query}
		+operatoruint16_t() {query}
		+~Event()
		+operator=(const Event& other) : Event&
		+operator=(Event&& other) : Event&
		+toString() : String {query}
		+{static} typeToString(Type type) : String
		+{static} TypeIsBoolean(Type type) : bool
		+isBoolean() : bool {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const Event& other) : bool {query}
		+operator==(const Event& other) : bool {query}
		+type() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+value() : uint16_t {query}
		+clear() : void
		+setType(Type type) : void
		+setValue(uint16_t value) : void
	}

	class FrameDecoder {
		+FrameDecoder()
		+FrameDecoder(const BusSettings& bus, const std::map<int, LedSettings>& leds)
		#FrameDecoder(Private& dd)
		+~FrameDecoder()
		+busSettings() : BusSettings& {query}
		+hasLed(int key) : bool {query}
		+isOpen() : bool {query}
		+isReady() : bool {query}
		+isSetupModeTriggered() : bool {query}
		+ledSettings() : std::map<int , LedSettings> {query}
		#d_ptr : std::unique_ptr<Private>
		+desiredTemp() : uint16_t {query}
		+error() : uint16_t {query}
		+rawStatus() : uint16_t {query}
		+sanitizerTime() : uint16_t {query}
		+waitForWaterTemp(unsigned long MaxWaitingTimeMs) : uint16_t {query}
		+waterTemp() : uint16_t {query}
		+frameCounter() : uint32_t {query}
		+frameDropped() : uint32_t {query}
		+isBubbleOn() : uint8_t {query}
		+isDisplayBlink() : uint8_t {query}
		+isFilterOn() : uint8_t {query}
		+isHeatReached() : uint8_t {query}
		+isHeaterOn() : uint8_t {query}
		+isJetOn() : uint8_t {query}
		+isLedOn(int key) : uint8_t {query}
		+isPowerOn() : uint8_t {query}
		+isSanitizerOn() : uint8_t {query}
		+waitUntilDisplayBlink(unsigned long MaxWaitingTimeMs) : uint8_t {query}
		+begin(unsigned long waitingTimeMs) : void
		+begin(const BusSettings& settings, const std::map<int, LedSettings>& leds, unsigned long waitingTimeMs) : void
		+clearTempUnitChangeCounter() : void
		+end() : void
	}

	class HardwareSettings {
		+HardwareSettings()
		+HardwareSettings(const BusSettings& bus, const std::map<int, LedSettings>& leds, const std::map<int, ButtonSettings>& buttons)
		+HardwareSettings(const HardwareSettings& other)
		+HardwareSettings(HardwareSettings&& other)
		#HardwareSettings(Private& dd)
		+~HardwareSettings()
		+bus() : BusSettings& {query}
		+{static} getFromRegister(const String& name) : HardwareSettings&
		+operator=(const HardwareSettings& other) : HardwareSettings&
		+operator=(HardwareSettings&& other) : HardwareSettings&
		+{static} addToRegister(const String& name, const HardwareSettings& settings) : bool
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const HardwareSettings& other) : bool {query}
		+operator==(const HardwareSettings& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		+buttons() : std::map<int , ButtonSettings>& {query}
		+leds() : std::map<int , LedSettings>& {query}
		#d_ptr : std::unique_ptr<Private>
		+clear() : void
		+print(Print& out) : void {query}
	}

	class LedSettings {
		+LedSettings()
		+LedSettings(const uint8_t order)
		+LedSettings(const LedSettings& other)
		+LedSettings(LedSettings&& other)
		#LedSettings(Private& dd)
		+~LedSettings()
		+operator=(const LedSettings& other) : LedSettings&
		+operator=(LedSettings&& other) : LedSettings&
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const LedSettings& other) : bool {query}
		+operator==(const LedSettings& other) : bool {query}
		#d_ptr : std::unique_ptr<Private>
		+frame() : uint16_t {query}
		+order() : uint8_t {query}
		+clear() : void
		+setOrder(const uint8_t order) : void
	}

	class Multiplexer {
		+Multiplexer(const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer(const String& name, const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer()
		+Multiplexer(const Multiplexer& other)
		+Multiplexer(Multiplexer&& other)
		#Multiplexer(Private& dd)
		+operator=(const Multiplexer& other) : Multiplexer&
		+operator=(Multiplexer&& other) : Multiplexer&
		+isEmpty() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+inhPin() : int {query}
		+select(int button) : int
		+selectPin(int order) : int {query}
		+size() : int {query}
		+begin() : void
		+clear() : void
		+deselect() : void
		+end() : void
		+setInhPin(int pin) : void
		+setSelectPin(int order, int pin) : void
	}

	class Pcf8574Mux {
		+Pcf8574Mux(uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		+Pcf8574Mux(const String& name, uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		+Pcf8574Mux(const Pcf8574Mux& other)
		+Pcf8574Mux(Pcf8574Mux&& other)
		#Pcf8574Mux(Private& dd)
		+operator=(const Pcf8574Mux& other) : Pcf8574Mux&
		+operator=(Pcf8574Mux&& other) : Pcf8574Mux&
		+isEmpty() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+select(int button) : int
		+address() : uint8_t {query}
		+begin() : void
		+clear() : void
		+deselect() : void
		+end() : void
	}

	class ServerSettings {
		+ServerSettings()
		+ServerSettings(const String& model, unsigned long interval)
		+ServerSettings(const char* model, unsigned long interval)
		+ServerSettings(const ServerSettings& other)
		+ServerSettings(ServerSettings&& other)
		#ServerSettings(Private& dd)
		+~ServerSettings()
		+operator=(const ServerSettings& other) : ServerSettings&
		+operator=(ServerSettings&& other) : ServerSettings&
		+spaModel() : String& {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const ServerSettings& other) : bool {query}
		+operator==(const ServerSettings& other) : bool {query}
		#d_ptr : std::unique_ptr<Private>
		+publishInterval() : unsigned long {query}
		+clear() : void
		+setPublishInterval(unsigned long interval) : void
		+setSpaModel(const String& model) : void
	}

	class SpaClient {
		+SpaClient()
		+SpaClient(std::initializer_list<Event::Type> subscribedEvents)
		+SpaClient(const std::set<Event::Type>& subscribedEvents)
		+SpaClient(const SpaClient& other)
		+SpaClient(SpaClient&& other)
		#SpaClient(const char* className)
		#SpaClient(Private& dd)
		+~SpaClient()
		+read() : Event
		+read(Event::Type type) : Event
		+operator=(const SpaClient& other) : SpaClient&
		+operator=(SpaClient&& other) : SpaClient&
		+className() : String& {query}
		+begin() : bool
		+handle() : bool
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isSubscribed(const Event::Type& event) : bool {query}
		+operator!=(const SpaClient& other) : bool {query}
		+operator==(const SpaClient& other) : bool {query}
		#pollSpaEvents() : bool
		#pullFromSpa(Event& event) : bool
		+write(const Event& event) : bool
		+available() : int {query}
		+subscribedEvents() : std::set<Event::Type>& {query}
		#d_ptr : std::unique_ptr<Private>
		#spaValue(Event::Type type) : uint16_t {query}
		+clear() : void
		+end() : void
		#pushToSpa(const Event& event) : void
		+subscribe(std::initializer_list<Event::Type> subscribedEvents) : void
		+subscribe(std::set<Event::Type> subscribedEvents) : void
		+subscribe(Event::Type event) : void
	}

	class SpaServer {
		+SpaServer()
		#SpaServer(Private& dd)
		+settings() : ServerSettings* {query}
		+client(const String& className) : SpaClient* {query}
		+addClient(SpaClient& client) : bool
		+begin(const ServerSettings& settings, unsigned long waitingTimeMs) : bool
		+handle() : bool
		+removeClient(const String& className) : bool
		+removeClient(const char* className) : bool
		+removeClient(const SpaClient& client) : bool
		+clientCount() : int {query}
		+end() : void
	}

	enum Event::Type {
		AmbientTemperature
		AnyEvent
		BubbleOn
		DesiredTemp
		ErrorCode
		FilterOn
		HeatReached
		HeaterOn
		JetOn
		NoEvent
		PowerOn
		SanitizerOn
		SanitizerTime
		SetDesiredTemp
		WaterTemp
	}

	enum Key {
		Bubble
		Filter
		HeatReached
		Heater
		Jet
		Power
		Sanitizer
		TempDown
		TempUnit
		TempUp
	}

	enum Multiplexer::empty {
		A
		B
		C
		D
		E
		F
		G
		H
	}
}





/' Inheritance relationships '/

SpaIot.ButtonController <|- - SpaIot.Multiplexer


SpaIot.ButtonController <|- - SpaIot.Pcf8574Mux


SpaIot.ControlPanel <|- - SpaIot.SpaServer


SpaIot.FrameDecoder <|- - SpaIot.ControlPanel





/' Aggregation relationships '/





/' Nested objects '/

SpaIot.Event +- - SpaIot.Event::Type


SpaIot.Multiplexer +- - SpaIot.Multiplexer::empty




@enduml

@startuml






namespace SpaIot {
	class BusSettings {
		+BusSettings()
		+BusSettings(const int dataPin, const int clkPin, const int holdPin)
		+BusSettings(const std::initializer_list<int>& pins)
		+BusSettings(const BusSettings& other)
		+BusSettings(BusSettings&& other)
		#BusSettings(Private& dd)
		+~BusSettings()
		+operator=(const BusSettings& other) : BusSettings&
		+operator=(BusSettings&& other) : BusSettings&
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const BusSettings& other) : bool {query}
		+operator==(const BusSettings& other) : bool {query}
		+clkPin() : int {query}
		+dataPin() : int {query}
		+holdPin() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+clear() : void
		+setClkPin(int pin) : void
		+setDataPin(int pin) : void
		+setHoldPin(int pin) : void
	}

	class Button {
		+Button()
		+Button(const ButtonSettings& settings)
		+Button(const Button& other)
		+Button(Button&& other)
		#Button(Private& dd)
		+~Button()
		+operator=(const Button& other) : Button&
		+operator=(Button&& other) : Button&
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		+settings() : ButtonSettings& {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isPressed() : bool {query}
		+operator!=(const Button& other) : bool {query}
		+operator==(const Button& other) : bool {query}
		+id() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+begin() : void
		+clear() : void
		+press() : void
		+push() : void
		+release() : void
	}

	abstract class ButtonController {
		+ButtonController(const ButtonController& other)
		+ButtonController(ButtonController&& other)
		#ButtonController(Private& dd)
		+~ButtonController()
		+{static} getFromRegister(const String& name) : ButtonController&
		+operator=(const ButtonController& other) : ButtonController&
		+operator=(ButtonController&& other) : ButtonController&
		+name() : String& {query}
		+{static} addToRegister(const String& name, ButtonController& controller) : bool
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isSelected() : bool {query}
		+operator!=(const ButtonController& other) : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		+{abstract} select(int button) : int
		+selected() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+begin() : void
		+clear() : void
		+{abstract} deselect() : void
		+end() : void
	}

	class ButtonSettings {
		+ButtonSettings()
		+ButtonSettings(const String& controllerName, int buttonId)
		+ButtonSettings(ButtonController& controller, int buttonId)
		+ButtonSettings(const ButtonSettings& other)
		+ButtonSettings(ButtonSettings&& other)
		#ButtonSettings(Private& dd)
		+~ButtonSettings()
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		+operator=(const ButtonSettings& other) : ButtonSettings&
		+operator=(ButtonSettings&& other) : ButtonSettings&
		+controllerName() : String& {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const ButtonSettings& other) : bool {query}
		+operator==(const ButtonSettings& other) : bool {query}
		+id() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+clear() : void
		+setId(int id) : void
	}

	class ControlPanel {
		+ControlPanel()
		+ControlPanel(const HardwareSettings& hwsettings)
		+ControlPanel(const String& hwSettingsName)
		#ControlPanel(Private& dd)
		+button(int key) : Button&
		+hasButton(int key) : bool {query}
		+isOpen() : bool {query}
		+pushButton(int key) : bool
		+setDesiredTemp(uint16_t temp) : bool
		+setSanitizerTime(uint16_t time) : bool
		+buttonSettings() : std::map<int , ButtonSettings> {query}
		+waitForDesiredTemp(unsigned long MaxWaitingTimeMs) : uint16_t
		+setBubble(bool v) : uint8_t
		+setFilter(bool v) : uint8_t
		+setHeater(bool v) : uint8_t
		+setJet(bool v) : uint8_t
		+setPower(bool v) : uint8_t
		+begin(unsigned long waitingTimeMs) : void
		+begin(const HardwareSettings& hwsettings, unsigned long waitingTimeMs) : void
		+begin(const String& hwSettingsName, unsigned long waitingTimeMs) : void
		+end() : void
	}

	class Event {
		+Event(Type type, uint16_t value)
		+Event(const Event& other)
		+Event(Event&& other)
		#Event(Private& dd)
		+operatorbool() {query}
		+operatoruint16_t() {query}
		+~Event()
		+operator=(const Event& other) : Event&
		+operator=(Event&& other) : Event&
		+toString() : String {query}
		+{static} typeToString(Type type) : String
		+{static} TypeIsBoolean(Type type) : bool
		+isBoolean() : bool {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const Event& other) : bool {query}
		+operator==(const Event& other) : bool {query}
		+type() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+value() : uint16_t {query}
		+clear() : void
		+setType(Type type) : void
		+setValue(uint16_t value) : void
	}

	class FrameDecoder {
		+FrameDecoder()
		+FrameDecoder(const BusSettings& bus, const std::map<int, LedSettings>& leds)
		#FrameDecoder(Private& dd)
		+~FrameDecoder()
		+busSettings() : BusSettings& {query}
		+hasLed(int key) : bool {query}
		+isOpen() : bool {query}
		+isReady() : bool {query}
		+isSetupModeTriggered() : bool {query}
		+ledSettings() : std::map<int , LedSettings> {query}
		#d_ptr : std::unique_ptr<Private>
		+desiredTemp() : uint16_t {query}
		+error() : uint16_t {query}
		+rawStatus() : uint16_t {query}
		+sanitizerTime() : uint16_t {query}
		+waitForWaterTemp(unsigned long MaxWaitingTimeMs) : uint16_t {query}
		+waterTemp() : uint16_t {query}
		+frameCounter() : uint32_t {query}
		+frameDropped() : uint32_t {query}
		+isBubbleOn() : uint8_t {query}
		+isDisplayBlink() : uint8_t {query}
		+isFilterOn() : uint8_t {query}
		+isHeatReached() : uint8_t {query}
		+isHeaterOn() : uint8_t {query}
		+isJetOn() : uint8_t {query}
		+isLedOn(int key) : uint8_t {query}
		+isPowerOn() : uint8_t {query}
		+isSanitizerOn() : uint8_t {query}
		+waitUntilDisplayBlink(unsigned long MaxWaitingTimeMs) : uint8_t {query}
		+begin(unsigned long waitingTimeMs) : void
		+begin(const BusSettings& settings, const std::map<int, LedSettings>& leds, unsigned long waitingTimeMs) : void
		+clearTempUnitChangeCounter() : void
		+end() : void
	}

	class HardwareSettings {
		+HardwareSettings()
		+HardwareSettings(const BusSettings& bus, const std::map<int, LedSettings>& leds, const std::map<int, ButtonSettings>& buttons)
		+HardwareSettings(const HardwareSettings& other)
		+HardwareSettings(HardwareSettings&& other)
		#HardwareSettings(Private& dd)
		+~HardwareSettings()
		+bus() : BusSettings& {query}
		+{static} getFromRegister(const String& name) : HardwareSettings&
		+operator=(const HardwareSettings& other) : HardwareSettings&
		+operator=(HardwareSettings&& other) : HardwareSettings&
		+{static} addToRegister(const String& name, const HardwareSettings& settings) : bool
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const HardwareSettings& other) : bool {query}
		+operator==(const HardwareSettings& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		+buttons() : std::map<int , ButtonSettings>& {query}
		+leds() : std::map<int , LedSettings>& {query}
		#d_ptr : std::unique_ptr<Private>
		+clear() : void
		+print(Print& out) : void {query}
	}

	class LedSettings {
		+LedSettings()
		+LedSettings(const uint8_t order)
		+LedSettings(const LedSettings& other)
		+LedSettings(LedSettings&& other)
		#LedSettings(Private& dd)
		+~LedSettings()
		+operator=(const LedSettings& other) : LedSettings&
		+operator=(LedSettings&& other) : LedSettings&
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const LedSettings& other) : bool {query}
		+operator==(const LedSettings& other) : bool {query}
		#d_ptr : std::unique_ptr<Private>
		+frame() : uint16_t {query}
		+order() : uint8_t {query}
		+clear() : void
		+setOrder(const uint8_t order) : void
	}

	class Multiplexer {
		+Multiplexer(const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer(const String& name, const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer()
		+Multiplexer(const Multiplexer& other)
		+Multiplexer(Multiplexer&& other)
		#Multiplexer(Private& dd)
		+operator=(const Multiplexer& other) : Multiplexer&
		+operator=(Multiplexer&& other) : Multiplexer&
		+isEmpty() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+inhPin() : int {query}
		+select(int button) : int
		+selectPin(int order) : int {query}
		+size() : int {query}
		+begin() : void
		+clear() : void
		+deselect() : void
		+end() : void
		+setInhPin(int pin) : void
		+setSelectPin(int order, int pin) : void
	}

	class Pcf8574Mux {
		+Pcf8574Mux(uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		+Pcf8574Mux(const String& name, uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		+Pcf8574Mux(const Pcf8574Mux& other)
		+Pcf8574Mux(Pcf8574Mux&& other)
		#Pcf8574Mux(Private& dd)
		+operator=(const Pcf8574Mux& other) : Pcf8574Mux&
		+operator=(Pcf8574Mux&& other) : Pcf8574Mux&
		+isEmpty() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+select(int button) : int
		+address() : uint8_t {query}
		+begin() : void
		+clear() : void
		+deselect() : void
		+end() : void
	}

	class ServerSettings {
		+ServerSettings()
		+ServerSettings(const String& model, unsigned long interval)
		+ServerSettings(const char* model, unsigned long interval)
		+ServerSettings(const ServerSettings& other)
		+ServerSettings(ServerSettings&& other)
		#ServerSettings(Private& dd)
		+~ServerSettings()
		+operator=(const ServerSettings& other) : ServerSettings&
		+operator=(ServerSettings&& other) : ServerSettings&
		+spaModel() : String& {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const ServerSettings& other) : bool {query}
		+operator==(const ServerSettings& other) : bool {query}
		#d_ptr : std::unique_ptr<Private>
		+publishInterval() : unsigned long {query}
		+clear() : void
		+setPublishInterval(unsigned long interval) : void
		+setSpaModel(const String& model) : void
	}

	class SpaClient {
		+SpaClient()
		+SpaClient(std::initializer_list<Event::Type> subscribedEvents)
		+SpaClient(const std::set<Event::Type>& subscribedEvents)
		+SpaClient(const SpaClient& other)
		+SpaClient(SpaClient&& other)
		#SpaClient(const char* className)
		#SpaClient(Private& dd)
		+~SpaClient()
		+read() : Event
		+read(Event::Type type) : Event
		+operator=(const SpaClient& other) : SpaClient&
		+operator=(SpaClient&& other) : SpaClient&
		+className() : String& {query}
		+begin() : bool
		+handle() : bool
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isSubscribed(const Event::Type& event) : bool {query}
		+operator!=(const SpaClient& other) : bool {query}
		+operator==(const SpaClient& other) : bool {query}
		#pollSpaEvents() : bool
		#pullFromSpa(Event& event) : bool
		+write(const Event& event) : bool
		+available() : int {query}
		+subscribedEvents() : std::set<Event::Type>& {query}
		#d_ptr : std::unique_ptr<Private>
		#spaValue(Event::Type type) : uint16_t {query}
		+clear() : void
		+end() : void
		#pushToSpa(const Event& event) : void
		+subscribe(std::initializer_list<Event::Type> subscribedEvents) : void
		+subscribe(std::set<Event::Type> subscribedEvents) : void
		+subscribe(Event::Type event) : void
	}

	class SpaServer {
		+SpaServer()
		#SpaServer(Private& dd)
		+settings() : ServerSettings* {query}
		+client(const String& className) : SpaClient* {query}
		+addClient(SpaClient& client) : bool
		+begin(const ServerSettings& settings, unsigned long waitingTimeMs) : bool
		+handle() : bool
		+removeClient(const String& className) : bool
		+removeClient(const char* className) : bool
		+removeClient(const SpaClient& client) : bool
		+clientCount() : int {query}
		+end() : void
	}

	enum Event::Type {
		AmbientTemperature
		AnyEvent
		BubbleOn
		DesiredTemp
		ErrorCode
		FilterOn
		HeatReached
		HeaterOn
		JetOn
		NoEvent
		PowerOn
		SanitizerOn
		SanitizerTime
		SetDesiredTemp
		WaterTemp
	}

	enum Key {
		Bubble
		Filter
		HeatReached
		Heater
		Jet
		Power
		Sanitizer
		TempDown
		TempUnit
		TempUp
	}

	enum Multiplexer::empty {
		A
		B
		C
		D
		E
		F
		G
		H
	}
}






SpaIot.ButtonController <|- - SpaIot.Multiplexer


SpaIot.ButtonController <|- - SpaIot.Pcf8574Mux


SpaIot.ControlPanel <|- - SpaIot.SpaServer


SpaIot.FrameDecoder <|- - SpaIot.ControlPanel











SpaIot.Event +- - SpaIot.Event::Type


SpaIot.Multiplexer +- - SpaIot.Multiplexer::empty




@enduml

PlantUML version 1.2022.7(Mon Aug 22 19:01:30 CEST 2022)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: Cp1252
Language: fr
Country: FR
--></g></svg>