@startuml





/' Objects '/

namespace SpaIot {
	class BusSettings {
		+BusSettings()
		+BusSettings(const int dataPin, const int clkPin, const int holdPin)
		+BusSettings(const std::initializer_list<int>& pins)
		+BusSettings(const BusSettings& other)
		+BusSettings(BusSettings&& other)
		#BusSettings(Private& dd)
		+~BusSettings()
		+operator=(const BusSettings& other) : BusSettings&
		+operator=(BusSettings&& other) : BusSettings&
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const BusSettings& other) : bool {query}
		+operator==(const BusSettings& other) : bool {query}
		+clkPin() : int {query}
		+dataPin() : int {query}
		+holdPin() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+clear() : void
		+setClkPin(int pin) : void
		+setDataPin(int pin) : void
		+setHoldPin(int pin) : void
	}

	class Button {
		+Button()
		+Button(const ButtonSettings& settings)
		+Button(const Button& other)
		+Button(Button&& other)
		#Button(Private& dd)
		+~Button()
		+operator=(const Button& other) : Button&
		+operator=(Button&& other) : Button&
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		+settings() : ButtonSettings& {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isPressed() : bool {query}
		+operator!=(const Button& other) : bool {query}
		+operator==(const Button& other) : bool {query}
		+id() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+begin() : void
		+clear() : void
		+press() : void
		+push() : void
		+release() : void
	}

	abstract class ButtonController {
		+ButtonController(const ButtonController& other)
		+ButtonController(ButtonController&& other)
		#ButtonController(Private& dd)
		+~ButtonController()
		+{static} getFromRegister(const String& name) : ButtonController&
		+operator=(const ButtonController& other) : ButtonController&
		+operator=(ButtonController&& other) : ButtonController&
		+name() : String& {query}
		+{static} addToRegister(const String& name, ButtonController& controller) : bool
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isSelected() : bool {query}
		+operator!=(const ButtonController& other) : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		+{abstract} select(int button) : int
		+selected() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+begin() : void
		+clear() : void
		+{abstract} deselect() : void
		+end() : void
	}

	class ButtonSettings {
		+ButtonSettings()
		+ButtonSettings(const String& controllerName, int buttonId)
		+ButtonSettings(ButtonController& controller, int buttonId)
		+ButtonSettings(const ButtonSettings& other)
		+ButtonSettings(ButtonSettings&& other)
		#ButtonSettings(Private& dd)
		+~ButtonSettings()
		+ctrl() : ButtonController& {query}
		+ctrl() : ButtonController&
		+operator=(const ButtonSettings& other) : ButtonSettings&
		+operator=(ButtonSettings&& other) : ButtonSettings&
		+controllerName() : String& {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const ButtonSettings& other) : bool {query}
		+operator==(const ButtonSettings& other) : bool {query}
		+id() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+clear() : void
		+setId(int id) : void
	}

	class ControlPanel {
		+ControlPanel()
		+ControlPanel(const HardwareSettings& hwsettings)
		+ControlPanel(const String& hwSettingsName)
		#ControlPanel(Private& dd)
		+button(int key) : Button&
		+hasButton(int key) : bool {query}
		+isOpen() : bool {query}
		+pushButton(int key) : bool
		+setDesiredTemp(uint16_t temp) : bool
		+setSanitizerTime(uint16_t time) : bool
		+buttonSettings() : std::map<int , ButtonSettings> {query}
		+waitForDesiredTemp(unsigned long MaxWaitingTimeMs) : uint16_t
		+setBubble(bool v) : uint8_t
		+setFilter(bool v) : uint8_t
		+setHeater(bool v) : uint8_t
		+setJet(bool v) : uint8_t
		+setPower(bool v) : uint8_t
		+begin(unsigned long waitingTimeMs) : void
		+begin(const HardwareSettings& hwsettings, unsigned long waitingTimeMs) : void
		+begin(const String& hwSettingsName, unsigned long waitingTimeMs) : void
		+end() : void
	}

	class Event {
		+Event(Type type, uint16_t value)
		+Event(const Event& other)
		+Event(Event&& other)
		#Event(Private& dd)
		+operatorbool() {query}
		+operatoruint16_t() {query}
		+~Event()
		+operator=(const Event& other) : Event&
		+operator=(Event&& other) : Event&
		+toString() : String {query}
		+{static} typeToString(Type type) : String
		+{static} TypeIsBoolean(Type type) : bool
		+isBoolean() : bool {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const Event& other) : bool {query}
		+operator==(const Event& other) : bool {query}
		+type() : int {query}
		#d_ptr : std::unique_ptr<Private>
		+value() : uint16_t {query}
		+clear() : void
		+setType(Type type) : void
		+setValue(uint16_t value) : void
	}

	class FrameDecoder {
		+FrameDecoder()
		+FrameDecoder(const BusSettings& bus, const std::map<int, LedSettings>& leds)
		#FrameDecoder(Private& dd)
		+~FrameDecoder()
		+busSettings() : BusSettings& {query}
		+hasLed(int key) : bool {query}
		+isOpen() : bool {query}
		+isReady() : bool {query}
		+isSetupModeTriggered() : bool {query}
		+ledSettings() : std::map<int , LedSettings> {query}
		#d_ptr : std::unique_ptr<Private>
		+desiredTemp() : uint16_t {query}
		+error() : uint16_t {query}
		+rawStatus() : uint16_t {query}
		+sanitizerTime() : uint16_t {query}
		+waitForWaterTemp(unsigned long MaxWaitingTimeMs) : uint16_t {query}
		+waterTemp() : uint16_t {query}
		+frameCounter() : uint32_t {query}
		+frameDropped() : uint32_t {query}
		+isBubbleOn() : uint8_t {query}
		+isDisplayBlink() : uint8_t {query}
		+isFilterOn() : uint8_t {query}
		+isHeatReached() : uint8_t {query}
		+isHeaterOn() : uint8_t {query}
		+isJetOn() : uint8_t {query}
		+isLedOn(int key) : uint8_t {query}
		+isPowerOn() : uint8_t {query}
		+isSanitizerOn() : uint8_t {query}
		+waitUntilDisplayBlink(unsigned long MaxWaitingTimeMs) : uint8_t {query}
		+begin(unsigned long waitingTimeMs) : void
		+begin(const BusSettings& settings, const std::map<int, LedSettings>& leds, unsigned long waitingTimeMs) : void
		+clearTempUnitChangeCounter() : void
		+end() : void
	}

	class HardwareSettings {
		+HardwareSettings()
		+HardwareSettings(const BusSettings& bus, const std::map<int, LedSettings>& leds, const std::map<int, ButtonSettings>& buttons)
		+HardwareSettings(const HardwareSettings& other)
		+HardwareSettings(HardwareSettings&& other)
		#HardwareSettings(Private& dd)
		+~HardwareSettings()
		+bus() : BusSettings& {query}
		+{static} getFromRegister(const String& name) : HardwareSettings&
		+operator=(const HardwareSettings& other) : HardwareSettings&
		+operator=(HardwareSettings&& other) : HardwareSettings&
		+{static} addToRegister(const String& name, const HardwareSettings& settings) : bool
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const HardwareSettings& other) : bool {query}
		+operator==(const HardwareSettings& other) : bool {query}
		+{static} registerContains(const String& name) : bool
		+buttons() : std::map<int , ButtonSettings>& {query}
		+leds() : std::map<int , LedSettings>& {query}
		#d_ptr : std::unique_ptr<Private>
		+clear() : void
		+print(Print& out) : void {query}
	}

	class LedSettings {
		+LedSettings()
		+LedSettings(const uint8_t order)
		+LedSettings(const LedSettings& other)
		+LedSettings(LedSettings&& other)
		#LedSettings(Private& dd)
		+~LedSettings()
		+operator=(const LedSettings& other) : LedSettings&
		+operator=(LedSettings&& other) : LedSettings&
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const LedSettings& other) : bool {query}
		+operator==(const LedSettings& other) : bool {query}
		#d_ptr : std::unique_ptr<Private>
		+frame() : uint16_t {query}
		+order() : uint8_t {query}
		+clear() : void
		+setOrder(const uint8_t order) : void
	}

	class Multiplexer {
		+Multiplexer(const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer(const String& name, const std::initializer_list<int>& spins, int inhPin)
		+Multiplexer()
		+Multiplexer(const Multiplexer& other)
		+Multiplexer(Multiplexer&& other)
		#Multiplexer(Private& dd)
		+operator=(const Multiplexer& other) : Multiplexer&
		+operator=(Multiplexer&& other) : Multiplexer&
		+isEmpty() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+inhPin() : int {query}
		+select(int button) : int
		+selectPin(int order) : int {query}
		+size() : int {query}
		+begin() : void
		+clear() : void
		+deselect() : void
		+end() : void
		+setInhPin(int pin) : void
		+setSelectPin(int order, int pin) : void
	}

	class Pcf8574Mux {
		+Pcf8574Mux(uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		+Pcf8574Mux(const String& name, uint8_t slaveAddress, TwoWire& bus, uint8_t idleValue)
		+Pcf8574Mux(const Pcf8574Mux& other)
		+Pcf8574Mux(Pcf8574Mux&& other)
		#Pcf8574Mux(Private& dd)
		+operator=(const Pcf8574Mux& other) : Pcf8574Mux&
		+operator=(Pcf8574Mux&& other) : Pcf8574Mux&
		+isEmpty() : bool {query}
		+operator==(const ButtonController& other) : bool {query}
		+select(int button) : int
		+address() : uint8_t {query}
		+begin() : void
		+clear() : void
		+deselect() : void
		+end() : void
	}

	class ServerSettings {
		+ServerSettings()
		+ServerSettings(const String& model, unsigned long interval)
		+ServerSettings(const char* model, unsigned long interval)
		+ServerSettings(const ServerSettings& other)
		+ServerSettings(ServerSettings&& other)
		#ServerSettings(Private& dd)
		+~ServerSettings()
		+operator=(const ServerSettings& other) : ServerSettings&
		+operator=(ServerSettings&& other) : ServerSettings&
		+spaModel() : String& {query}
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+operator!=(const ServerSettings& other) : bool {query}
		+operator==(const ServerSettings& other) : bool {query}
		#d_ptr : std::unique_ptr<Private>
		+publishInterval() : unsigned long {query}
		+clear() : void
		+setPublishInterval(unsigned long interval) : void
		+setSpaModel(const String& model) : void
	}

	class SpaClient {
		+SpaClient()
		+SpaClient(std::initializer_list<Event::Type> subscribedEvents)
		+SpaClient(const std::set<Event::Type>& subscribedEvents)
		+SpaClient(const SpaClient& other)
		+SpaClient(SpaClient&& other)
		#SpaClient(const char* className)
		#SpaClient(Private& dd)
		+~SpaClient()
		+read() : Event
		+read(Event::Type type) : Event
		+operator=(const SpaClient& other) : SpaClient&
		+operator=(SpaClient&& other) : SpaClient&
		+className() : String& {query}
		+begin() : bool
		+handle() : bool
		+isEmpty() : bool {query}
		+isNull() : bool {query}
		+isOpen() : bool {query}
		+isSubscribed(const Event::Type& event) : bool {query}
		+operator!=(const SpaClient& other) : bool {query}
		+operator==(const SpaClient& other) : bool {query}
		#pollSpaEvents() : bool
		#pullFromSpa(Event& event) : bool
		+write(const Event& event) : bool
		+available() : int {query}
		+subscribedEvents() : std::set<Event::Type>& {query}
		#d_ptr : std::unique_ptr<Private>
		#spaValue(Event::Type type) : uint16_t {query}
		+clear() : void
		+end() : void
		#pushToSpa(const Event& event) : void
		+subscribe(std::initializer_list<Event::Type> subscribedEvents) : void
		+subscribe(std::set<Event::Type> subscribedEvents) : void
		+subscribe(Event::Type event) : void
	}

	class SpaServer {
		+SpaServer()
		#SpaServer(Private& dd)
		+settings() : ServerSettings* {query}
		+client(const String& className) : SpaClient* {query}
		+addClient(SpaClient& client) : bool
		+begin(const ServerSettings& settings, unsigned long waitingTimeMs) : bool
		+handle() : bool
		+removeClient(const String& className) : bool
		+removeClient(const char* className) : bool
		+removeClient(const SpaClient& client) : bool
		+clientCount() : int {query}
		+end() : void
	}

	enum Event::Type {
		AmbientTemperature
		AnyEvent
		BubbleOn
		DesiredTemp
		ErrorCode
		FilterOn
		HeatReached
		HeaterOn
		JetOn
		NoEvent
		PowerOn
		SanitizerOn
		SanitizerTime
		SetDesiredTemp
		WaterTemp
	}

	enum Key {
		Bubble
		Filter
		HeatReached
		Heater
		Jet
		Power
		Sanitizer
		TempDown
		TempUnit
		TempUp
	}

	enum Multiplexer::empty {
		A
		B
		C
		D
		E
		F
		G
		H
	}
}





/' Inheritance relationships '/

SpaIot.ButtonController <|-- SpaIot.Multiplexer


SpaIot.ButtonController <|-- SpaIot.Pcf8574Mux


SpaIot.ControlPanel <|-- SpaIot.SpaServer


SpaIot.FrameDecoder <|-- SpaIot.ControlPanel





/' Aggregation relationships '/





/' Nested objects '/

SpaIot.Event +-- SpaIot.Event::Type


SpaIot.Multiplexer +-- SpaIot.Multiplexer::empty




@enduml
